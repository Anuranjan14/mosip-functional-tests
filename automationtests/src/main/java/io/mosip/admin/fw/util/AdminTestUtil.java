package io.mosip.admin.fw.util;

import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.DataOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.KeyStore.PrivateKeyEntry;
import java.security.KeyStoreException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.UnrecoverableEntryException;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Base64;
import java.util.Base64.Encoder;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Properties;
import java.util.Set;
import java.util.TimeZone;
import java.util.UUID;
import java.util.stream.Collectors;

import javax.ws.rs.core.MediaType;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.bouncycastle.operator.OperatorCreationException;
import org.bouncycastle.util.io.pem.PemObject;
import org.bouncycastle.util.io.pem.PemReader;
import org.jose4j.jws.JsonWebSignature;
import org.jose4j.lang.JoseException;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.testng.Assert;
import org.testng.Reporter;
import org.testng.SkipException;
import org.yaml.snakeyaml.Yaml;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.jknack.handlebars.Context;
import com.github.jknack.handlebars.Handlebars;
import com.github.jknack.handlebars.Template;
import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.gson.reflect.TypeToken;
import com.nimbusds.jose.JWSAlgorithm;
import com.nimbusds.jose.JWSHeader;
import com.nimbusds.jose.JWSSigner;
import com.nimbusds.jose.crypto.RSASSASigner;
import com.nimbusds.jose.jwk.RSAKey;
import com.nimbusds.jose.util.StandardCharset;
import com.nimbusds.jwt.JWTClaimsSet;
import com.nimbusds.jwt.SignedJWT;
import com.opencsv.CSVReader;
import com.opencsv.CSVWriter;

import io.mosip.authentication.fw.dto.OutputValidationDto;
import io.mosip.authentication.fw.precon.JsonPrecondtion;
import io.mosip.authentication.fw.precon.MessagePrecondtion;
import io.mosip.authentication.fw.util.OutputValidationUtil;
import io.mosip.authentication.fw.util.ReportUtil;
import io.mosip.authentication.fw.util.RestClient;
import io.mosip.authentication.fw.util.RunConfigUtil;
import io.mosip.dbaccess.AuditDBManager;
import io.mosip.ida.certificate.PartnerRegistration;
import io.mosip.kernel.core.util.HMACUtils2;
import io.mosip.kernel.util.ConfigManager;
import io.mosip.kernel.util.KernelAuthentication;
import io.mosip.kernel.util.KeycloakUserManager;
import io.mosip.kernel.util.Translator;
import io.mosip.service.BaseTestCase;
import io.mosip.testrunner.MockSMTPListener;
import io.mosip.testrunner.MosipTestRunner;
import io.restassured.RestAssured;
import io.restassured.response.Response;

/**
 * @author Ravi Kant
 * @author Sohan
 *
 */
public class AdminTestUtil extends BaseTestCase {

	private static final Logger logger = Logger.getLogger(AdminTestUtil.class);
	String token = null;
	String idToken = null;
	String adminAutoGeneratedIdPropFileName = "/admin/autoGeneratedId.properties";
	String masterDataAutoGeneratedIdPropFileName = "/masterdata/autoGeneratedId.properties";
	String syncDataAutoGeneratedIdPropFileName = "/syncdata/autoGeneratedId.properties";
	String preregAutoGeneratedIdPropFileName = "/preReg/autoGeneratedId.properties";
	String partnerAutoGeneratedIdPropFileName = "/partner/autoGeneratedId.properties";
	String idrepoAutoGeneratedIdPropFileName = "/idRepository/autoGeneratedId.properties";
	String residentAutoGeneratedIdPropFileName = "/resident/autoGeneratedId.properties";
	String esignetAutoGeneratedIdPropFileName = "/esignet/autoGeneratedId.properties";
	String mimotoAutoGeneratedIdPropFileName = "/mimoto/autoGeneratedId.properties";
	String authAutoGeneratedIdPropFileName = "/ida/autoGeneratedId.properties";
	String prerequisiteAutoGeneratedIdPropFileName = "/prerequisite/autoGeneratedId.properties";
	String regProcAutoGeneratedIdPropFileName = "/regProc/autoGeneratedId.properties";
	String mobileIdAutoGeneratedIdPropFileName = "/mobileId/autoGeneratedId.properties";
	public static final String resourceFolderName = "MosipTemporaryTestResource";
	public static String genertedUIN = null;
	public static String generatedRid = null;
	public static String regDeviceResponse = null;
	public static String generatedVID = null;
	public static boolean triggerIdPKeyGen1 = true;
	public static boolean triggerIdPKeyGen2 = true;
	public static boolean triggerIdPKeyGen3 = true;
	public static boolean triggerIdPKeyGen4 = true;
	public static boolean triggerIdPKeyGen5 = true;
	public static final String randomId = "mosip" + generateRandomNumberString(2)
			+ Calendar.getInstance().getTimeInMillis();
	public static final String randomId2 = "mosip" + generateRandomNumberString(2)
			+ Calendar.getInstance().getTimeInMillis();
	public static final String transactionId = generateRandomNumberString(10);
	public static final String AUTHORIZATHION_HEADERNAME = "Authorization";
	public static final String authHeaderValue = "Some String";
	public static final String SIGNATURE_HEADERNAME = "signature";
	
	public static final Properties props = getproperty(
			MosipTestRunner.getResourcePath() + "/" + "config/application.properties");
	public static final Properties propsMap = getproperty(
			MosipTestRunner.getResourcePath() + "/" + "config/valueMapping.properties");
	public static final Properties propsBio = getproperty(
			MosipTestRunner.getGlobalResourcePath() + "/" + "config/bioValue.properties");
	public static final Properties propsKernel = getproperty(
			MosipTestRunner.getResourcePath() + "/" + "config/Kernel.properties");
	public static BioDataUtility bioDataUtil = new BioDataUtility();
	public static EncryptionDecrptionUtil encryptDecryptUtil = null; // new EncryptionDecrptionUtil();
	public static String idField = null;
	public static String identityHbs = null;
	public static String draftHbs = null;
	public static String preregHbsForCreate = null;
	public static String preregHbsForUpdate = null;
	public static String timeStamp = String.valueOf(Calendar.getInstance().getTimeInMillis());
	public static String policyGroup = "mosip auth policy group " + timeStamp;
	public static String policyName = "mosip auth policy " + timeStamp;
	public static String UpdateUinRequest = "config/Authorization/requestIdentity.json";
	private static String authInternalRequest = "config/Authorization/internalAuthRequest.json";
	public static List<String> languageDetails = new ArrayList<>();
	private static String AuthPolicyBody = "config/AuthPolicy.json";
	private static String AuthPolicyRequest = "config/AuthPolicy3.json";
	private static String AuthPolicyRequestAttr = "config/AuthPolicy2.json";
	private static String policyGroupRequest = "config/policyGroup.json";
	private static String esignetPayload = "config/esignetPayload.json";
	public static HashMap<String, String> keycloakRolesMap = new HashMap<String, String>();
	public static HashMap<String, String> keycloakUsersMap = new HashMap<String, String>();
	private static File oidcJWKFile = new File("src/main/resources/oidcJWK.txt");
	public static RSAKey oidcJWKKey1 = null;
	public static RSAKey oidcJWKKey2 = null;
	public static RSAKey bindingJWKKey = null;
	public static RSAKey bindingJWKKeyVid = null;
	public static RSAKey bindingConsentJWKKey = null;
	private String zoneMappingRequest = "config/Authorization/zoneMappingRequest.json";
	public static File oidcJWK1 = new File("src/main/resources/oidcJWK1.txt");
	public static File oidcJWK2 = new File("src/main/resources/oidcJWK2.txt");
	public static File bindingJWK1 = new File("src/main/resources/bindingJWK1.txt");
	public static File bindingJWKVid = new File("src/main/resources/bindingJWKVid.txt");
	public static File bindingConsentJWK = new File("src/main/resources/bindingConsentJWK.txt");
	public static File clientPrivateKey = new File("src/main/resources/config/clientPrivateKey.txt");
	public static final String XSRF_HEADERNAME = "X-XSRF-TOKEN";
	public static final String OAUTH_HASH_HEADERNAME = "oauth-details-hash";
	public static final String OAUTH_TRANSID_HEADERNAME = "oauth-details-key";
	public static String encryptedSessionKeyString;
	// These variables are created to store esignet Cookie in a file and then use it
	// for
	// some apis
	private static File ESignetUINCookiesFile = new File("src/main/resources/ESignetUINCookiesResponse.txt");
	private static File ESignetVIDCookiesFile = new File("src/main/resources/ESignetVIDCookiesResponse.txt");
	private static File BINDINGCERTFile = new File("src/main/resources/BINDINGCERTFile.txt");
	private static File BINDINGCERTFileVid = new File("src/main/resources/BINDINGCERTFileVid.txt");
	private static File BINDINGCERTCONSENTFile = new File("src/main/resources/BINDINGCERTCONSENTFile.txt");

	/** The Constant SIGN_ALGO. */
	private static final String SIGN_ALGO = "RS256";
	public static final int OTP_CHECK_INTERVAL =  10000; //10 secs
	
	private static final String PREREG = "prereg";
	private static final String RESIDENT = "resident";
	private static final String MASTERDATA = "masterdata";

	/**
	 * This method will hit post request and return the response
	 * 
	 * @param url
	 * @param jsonInput
	 * @param cookieName
	 * @param role
	 * @return Response
	 */

	protected Response postWithBodyAndCookie(String url, String jsonInput, String cookieName, String role,
			String testCaseName) {
		return postWithBodyAndCookie(url, jsonInput, false, cookieName, role, testCaseName, false);
	}

	protected Response postWithBodyAndCookie(String url, String jsonInput, String cookieName, String role,
			String testCaseName, boolean bothAccessAndIdToken) {
		return postWithBodyAndCookie(url, jsonInput, false, cookieName, role, testCaseName, bothAccessAndIdToken);
	}
	
	protected Response postWithBodyAndCookie(String url, String jsonInput, boolean auditLogCheck, String cookieName, String role,
			String testCaseName) {
		return postWithBodyAndCookie(url, jsonInput, auditLogCheck, cookieName, role, testCaseName, false);
	}
	
	protected Response postWithBodyAndCookie(String url, String jsonInput, boolean auditLogCheck, String cookieName, String role,
			String testCaseName, boolean bothAccessAndIdToken) {
		Response response = null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);	
		url = uriKeyWordHandelerUri(url, testCaseName);
		if (BaseTestCase.currentModule.equals("prereg") || BaseTestCase.currentModule.equals("auth")
				|| BaseTestCase.currentModule.equals("resident") || BaseTestCase.currentModule.equals("masterdata")) {
			inputJson = smtpOtpHandler(inputJson, testCaseName);
		}

		if (bothAccessAndIdToken) {
			token = kernelAuthLib.getTokenByRole(role, ACCESSTOKENCOOKIENAME);
			idToken = kernelAuthLib.getTokenByRole(role, IDTOKENCOOKIENAME);
		} else {
			token = kernelAuthLib.getTokenByRole(role);
		}
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			if (bothAccessAndIdToken) {
				response = RestClient.postRequestWithCookie(url, inputJson, MediaType.APPLICATION_JSON,
						MediaType.APPLICATION_JSON, cookieName, token, IDTOKENCOOKIENAME, idToken);
			} else {
				response = RestClient.postRequestWithCookie(url, inputJson, MediaType.APPLICATION_JSON,
						MediaType.APPLICATION_JSON, cookieName, token);
			}
			
			if (auditLogCheck) {
				JSONObject jsonObject = new JSONObject(inputJson);
				String timeStamp = jsonObject.getString("requesttime");
				String dbChecker = "TEST_FULLNAME" + BaseTestCase.getLanguageList().get(0);
				try {
					checkDbAndValidate(timeStamp, dbChecker);
				} catch (AdminTestException e) {
					logger.error(e.getStackTrace());
				}
			}
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
		
	}

	protected Response DeleteWithBodyAndCookie(String url, String jsonInput, String cookieName, String role,
			String testCaseName) {
		Response response = null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		url = uriKeyWordHandelerUri(url, testCaseName);
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			response = RestClient.deleteRequestWithCookie(url, inputJson, MediaType.APPLICATION_JSON,
					MediaType.APPLICATION_JSON, cookieName, token);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response postWithBodyAndCookieWithText(String url, String jsonInput, String cookieName, String role,
			String testCaseName) {
		Response response = null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		url = uriKeyWordHandelerUri(url, testCaseName);
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			response = RestClient.postRequestWithCookie(url, inputJson, MediaType.APPLICATION_JSON, "*/*", cookieName,
					token);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response postRequestWithCookieAuthHeaderAndXsrfToken(String url, String jsonInput, String cookieName,
			String role, String testCaseName) {
		Response response = null;
		HashMap<String, String> headers = new HashMap<String, String>();
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		JSONObject request = new JSONObject(inputJson);
		String encodedResp = null;
		String transactionId = null;
		if (request.has("encodedHash")) {
			encodedResp = request.get("encodedHash").toString();
			request.remove("encodedHash");
		}
		if (request.has("request")) {
			if (request.getJSONObject("request").has("transactionId")) {
				transactionId = request.getJSONObject("request").get("transactionId").toString();
			}
		}
		inputJson = request.toString();
		if (BaseTestCase.currentModule.equals("masterdata")) {
			inputJson = smtpOtpHandler(inputJson, testCaseName);
		}
		logger.info("encodedhash = " + encodedResp);
		headers.put(XSRF_HEADERNAME, props.getProperty("XSRFTOKEN"));
		headers.put(OAUTH_HASH_HEADERNAME, encodedResp);
		headers.put(OAUTH_TRANSID_HEADERNAME, transactionId);
		token = props.getProperty("XSRFTOKEN");
//		token = headers + ";" + token;
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			response = RestClient.postRequestWithMultipleHeadersAndCookies(url, inputJson, MediaType.APPLICATION_JSON,
					MediaType.APPLICATION_JSON, cookieName, token, headers);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"

					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response postRequestWithCookieAuthHeaderAndXsrfTokenForAutoGenId(String url, String jsonInput,
			String cookieName, String role, String testCaseName, String idKeyName) {
		Response response = null;
		HashMap<String, String> headers = new HashMap<String, String>();
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		JSONObject request = new JSONObject(inputJson);
		String encodedResp = null;
		String transactionId = null;
		if (request.has("encodedHash")) {
			encodedResp = request.get("encodedHash").toString();
			request.remove("encodedHash");
		}
		if (request.has("request")) {
			if (request.getJSONObject("request").has("transactionId")) {
				transactionId = request.getJSONObject("request").get("transactionId").toString();
			}
		}
		headers.put(XSRF_HEADERNAME, props.getProperty("XSRFTOKEN"));
		headers.put(OAUTH_HASH_HEADERNAME, encodedResp);
		headers.put(OAUTH_TRANSID_HEADERNAME, transactionId);

		inputJson = request.toString();
		if (BaseTestCase.currentModule.equals("mobileid") || BaseTestCase.currentModule.equals("auth")
				|| BaseTestCase.currentModule.equals("esignet") || BaseTestCase.currentModule.equals("resident")) {
			inputJson = smtpOtpHandler(inputJson, testCaseName);
		}

		token = props.getProperty("XSRFTOKEN");
//		token = headers + ";" + token;
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			response = RestClient.postRequestWithMultipleHeadersAndCookies(url, inputJson, MediaType.APPLICATION_JSON,
					MediaType.APPLICATION_JSON, cookieName, token, headers);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			if (testCaseName.toLowerCase().contains("_sid")) {
				writeAutoGeneratedId(response, idKeyName, testCaseName);
			}
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response postRequestWithCookieAuthHeaderForAutoGenId(String url, String jsonInput, String cookieName,
			String role, String testCaseName, String idKeyName) {
		Response response = null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		token = kernelAuthLib.getTokenByRole(role);
		String apiKey = null, partnerId = null;
		JSONObject req = new JSONObject(inputJson);
		apiKey = req.getString("apiKey");
		req.remove("apiKey");
		partnerId = req.getString("partnerId");
		req.remove("partnerId");

		HashMap<String, String> headers = new HashMap<String, String>();
		headers.put("PARTNER-API-KEY", apiKey);
		headers.put("PARTNER-ID", partnerId);
		headers.put(cookieName, "Bearer " + token);
		inputJson = req.toString();
		if (BaseTestCase.currentModule.equals("esignet")) {
			inputJson = smtpOtpHandler(inputJson, testCaseName);
		}
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			response = RestClient.postRequestWithMultipleHeadersWithoutCookie(url, inputJson,
					MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, headers);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			if (testCaseName.toLowerCase().contains("_sid")) {
				writeAutoGeneratedId(response, idKeyName, testCaseName);
			}
			if (testCaseName.contains("ESignet_LinkedAuthenticationWla_uin_all_Valid_Smoke_sid")
					|| testCaseName.contains("ESignet_LinkedAuthenticationWla_vid_all_Valid_Smoke_sid")
					|| testCaseName.contains("ESignet_LinkedAuthenticationWla_Consent_all_Valid_Smoke_sid")) {
				File fileName = null;
				if (testCaseName.contains("_uin_")) {
					fileName = BINDINGCERTFile;
				}
				if (testCaseName.contains("_vid_")) {
					fileName = BINDINGCERTFileVid;
				}
				if (testCaseName.contains("_Consent_")) {
					fileName = BINDINGCERTCONSENTFile;
				}
				String certificateData = new JSONObject(response.getBody().asString()).getJSONObject("response")
						.get("certificate").toString();
				FileUtils.touch(fileName);// File got created
				FileUtils.writeStringToFile(fileName, certificateData, StandardCharset.UTF_8.name());
			}
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response postRequestWithCookieAuthHeader(String url, String jsonInput, String cookieName, String role,
			String testCaseName) {
		Response response = null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		token = kernelAuthLib.getTokenByRole(role);
		String apiKey = null, partnerId = null;
		JSONObject req = new JSONObject(inputJson);
		apiKey = req.getString("apiKey");
		req.remove("apiKey");
		partnerId = req.getString("partnerId");
		req.remove("partnerId");

		HashMap<String, String> headers = new HashMap<String, String>();
		headers.put("PARTNER-API-KEY", apiKey);
		headers.put("PARTNER-ID", partnerId);
		headers.put(cookieName, "Bearer " + token);
		inputJson = req.toString();
		if (BaseTestCase.currentModule.equals("esignet")) {
			inputJson = smtpOtpHandler(inputJson, testCaseName);
		}
		
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			response = RestClient.postRequestWithMultipleHeadersWithoutCookie(url, inputJson,
					MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, headers);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response postWithBodyAndCookieForKeyCloak(String url, String jsonInput, String cookieName, String role,
			String testCaseName) {
		Response response = null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		url = uriKeyWordHandelerUri(url, testCaseName);
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			response = RestClient.postRequestWithBearerToken(url, inputJson, MediaType.APPLICATION_JSON,
					MediaType.APPLICATION_JSON, cookieName, token);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response postWithBodyAcceptTextPlainAndCookie(String url, String jsonInput, String cookieName,
			String role, String testCaseName) {
		Response response = null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			response = RestClient.postRequestWithCookie(url, inputJson, MediaType.APPLICATION_JSON,
					MediaType.TEXT_PLAIN, cookieName, token);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response postRequestWithCookieAuthHeaderAndSignature(String url, String jsonInput, String cookieName,
			String role, String testCaseName) {
		Response response = null;
		String uriParts[] = url.split("/");
		String partnerId = uriParts[uriParts.length - 2];
		HashMap<String, String> headers = new HashMap<String, String>();
		headers.put(AUTHORIZATHION_HEADERNAME, authHeaderValue);
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		headers.put(SIGNATURE_HEADERNAME, generateSignatureWithRequest(inputJson, null, partnerId));
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			response = RestClient.postRequestWithMultipleHeaders(url, inputJson, MediaType.APPLICATION_JSON,
					MediaType.APPLICATION_JSON, cookieName, token, headers);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response postRequestWithAuthHeaderAndSignatureForOtp(String url, String jsonInput, String cookieName,
			String token, HashMap<String, String> headers, String testCaseName) {
		Response response = null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		url = uriKeyWordHandelerUri(url, testCaseName);
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			response = RestClient.postRequestWithMultipleHeaders(url, inputJson, MediaType.APPLICATION_JSON,
					MediaType.APPLICATION_JSON, cookieName, token, headers);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response patchRequestWithCookieAuthHeaderAndSignature(String url, String jsonInput, String cookieName,
			String role, String testCaseName) {
		Response response = null;
		HashMap<String, String> headers = new HashMap<String, String>();
		headers.put(AUTHORIZATHION_HEADERNAME, authHeaderValue);
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		headers.put(SIGNATURE_HEADERNAME, generateSignatureWithRequest(inputJson, null, null));
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******Patch request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			response = RestClient.patchRequestWithMultipleHeaders(url, inputJson, MediaType.APPLICATION_JSON,
					MediaType.APPLICATION_JSON, cookieName, token, headers);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response postRequestWithAuthHeaderAndSignature(String url, String jsonInput, String testCaseName) {
		Response response = null;
		String uriParts[] = url.split("/");
		String partnerId = uriParts[uriParts.length - 2];
		HashMap<String, String> headers = new HashMap<String, String>();
		headers.put(AUTHORIZATHION_HEADERNAME, authHeaderValue);
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		headers.put(SIGNATURE_HEADERNAME, generateSignatureWithRequest(inputJson, null, partnerId));
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			response = RestClient.postRequestWithMultipleHeadersWithoutCookie(url, inputJson,
					MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, headers);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response postRequestWithHeaderAndSignature(String url, String jsonInput, String signature,
			String testCaseName) {
		Response response = null;
		HashMap<String, String> headers = new HashMap<String, String>();
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		headers.put(SIGNATURE_HEADERNAME, signature);
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			response = RestClient.postRequestWithMultipleHeadersWithoutCookie(url, inputJson,
					MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, headers);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response postRequestWithCookieAndHeader(String url, String jsonInput, String cookieName, String role,
			String testCaseName) {
		return postRequestWithCookieAndHeader(url, jsonInput, cookieName, role, testCaseName, false);
	}

	protected Response postRequestWithCookieAndHeader(String url, String jsonInput, String cookieName, String role,
			String testCaseName, boolean bothAccessAndIdToken) {
		Response response = null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		if (BaseTestCase.currentModule.equals("mobileid") || BaseTestCase.currentModule.equals("auth")
				|| BaseTestCase.currentModule.equals("resident") || BaseTestCase.currentModule.equals("masterdata")) {
			inputJson = smtpOtpHandler(inputJson, testCaseName);
		}

		if (bothAccessAndIdToken) {
			token = kernelAuthLib.getTokenByRole(role, ACCESSTOKENCOOKIENAME);
			idToken = kernelAuthLib.getTokenByRole(role, IDTOKENCOOKIENAME);
		} else {
			token = kernelAuthLib.getTokenByRole(role);
		}
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			if (bothAccessAndIdToken) {
				response = RestClient.postRequestWithCookieAndHeader(url, inputJson, MediaType.APPLICATION_JSON,
						MediaType.APPLICATION_JSON, cookieName, token, AUTHORIZATHION_HEADERNAME, authHeaderValue,
						IDTOKENCOOKIENAME, idToken);
			} else {
				response = RestClient.postRequestWithCookieAndHeader(url, inputJson, MediaType.APPLICATION_JSON,
						MediaType.APPLICATION_JSON, cookieName, token, AUTHORIZATHION_HEADERNAME, authHeaderValue);
			}

			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response patchRequestWithCookieAndHeader(String url, String jsonInput, String cookieName, String role,
			String testCaseName) {
		Response response = null;
		if (url.contains("ID:"))
			url = inputJsonKeyWordHandeler(url, testCaseName);
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		if (BaseTestCase.currentModule.equals("auth") || BaseTestCase.currentModule.equals("resident")) {
			inputJson = smtpOtpHandler(inputJson, testCaseName);
		}
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			response = RestClient.patchRequestWithCookieAndHeader(url, inputJson, MediaType.APPLICATION_JSON,
					MediaType.APPLICATION_JSON, cookieName, token, AUTHORIZATHION_HEADERNAME, authHeaderValue);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response patchWithBodyAndCookie(String url, String jsonInput, String cookieName, String role,
			String testCaseName) {
		return patchWithBodyAndCookie(url, jsonInput, cookieName, role, testCaseName, false);
	}

	protected Response patchWithBodyAndCookie(String url, String jsonInput, String cookieName, String role,
			String testCaseName, boolean bothAccessAndIdToken) {
		Response response = null;
		if (url.contains("ID:")) {
			url = uriKeyWordHandelerUri(url, testCaseName);
		}
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		if (bothAccessAndIdToken) {
			token = kernelAuthLib.getTokenByRole(role, ACCESSTOKENCOOKIENAME);
			idToken = kernelAuthLib.getTokenByRole(role, IDTOKENCOOKIENAME);
		} else {
			token = kernelAuthLib.getTokenByRole(role);
		}
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			if (bothAccessAndIdToken) {
				response = RestClient.patchRequestWithCookie(url, inputJson, MediaType.APPLICATION_JSON,
						MediaType.APPLICATION_JSON, cookieName, token, IDTOKENCOOKIENAME, idToken);
			} else {
				response = RestClient.patchRequestWithCookie(url, inputJson, MediaType.APPLICATION_JSON,
						MediaType.APPLICATION_JSON, cookieName, token);
			}

			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	
	protected Response postWithBodyAndCookieForAutoGeneratedId(String url, String jsonInput, boolean auditLogCheck,
			String cookieName, String role, String testCaseName, String idKeyName) {
		return postWithBodyAndCookieForAutoGeneratedId(url, jsonInput, auditLogCheck, cookieName, role, testCaseName,
				idKeyName, false);
	}
	
	protected Response postWithBodyAndCookieForAutoGeneratedId(String url, String jsonInput,
			String cookieName, String role, String testCaseName, String idKeyName) {
		return postWithBodyAndCookieForAutoGeneratedId(url, jsonInput, false, cookieName, role, testCaseName,
				idKeyName, false);
	}
	
	protected Response postWithBodyAndCookieForAutoGeneratedId(String url, String jsonInput, boolean auditLogCheck,boolean bothAccessAndIdToken,
			String cookieName, String role, String testCaseName, String idKeyName) {
		return postWithBodyAndCookieForAutoGeneratedId(url, jsonInput, false, cookieName, role, testCaseName,
				idKeyName,  bothAccessAndIdToken);
	}
	
	protected Response postWithBodyAndCookieForAutoGeneratedId(String url, String jsonInput, boolean auditLogCheck,
			String cookieName, String role, String testCaseName, String idKeyName, boolean bothAccessAndIdToken) {
		Response response = null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		
		url = inputJsonKeyWordHandeler(url, testCaseName);
		if (BaseTestCase.currentModule.equals("mobileid") || BaseTestCase.currentModule.equals("auth")
				|| BaseTestCase.currentModule.equals("esignet") || BaseTestCase.currentModule.equals("resident")
				|| BaseTestCase.currentModule.equals("masterdata")) {
			inputJson = smtpOtpHandler(inputJson, testCaseName);
		}
		if (bothAccessAndIdToken) {
			token = kernelAuthLib.getTokenByRole(role, ACCESSTOKENCOOKIENAME);
			idToken = kernelAuthLib.getTokenByRole(role, IDTOKENCOOKIENAME);
		} else {
			token = kernelAuthLib.getTokenByRole(role);
		}
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			if (bothAccessAndIdToken) {
				response = RestClient.postRequestWithCookie(url, inputJson, MediaType.APPLICATION_JSON,
						MediaType.APPLICATION_JSON, cookieName, token, IDTOKENCOOKIENAME, idToken);
			} else {
				response = RestClient.postRequestWithCookie(url, inputJson, MediaType.APPLICATION_JSON,
						MediaType.APPLICATION_JSON, cookieName, token);
			}
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			if (auditLogCheck) {
				JSONObject jsonObject = new JSONObject(inputJson);
				String timeStamp = jsonObject.getString("requesttime");
				String dbChecker = "TEST_FULLNAME" + BaseTestCase.getLanguageList().get(0);
				try {
					checkDbAndValidate(timeStamp, dbChecker);
				} catch (AdminTestException e) {
					logger.error(e.getStackTrace());
				}
			}
			if (testCaseName.toLowerCase().contains("_sid")) {
				writeAutoGeneratedId(response, idKeyName, testCaseName);
			}
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
		
		
	}

	protected Response postWithBodyAndBearerTokenForAutoGeneratedId(String url, String jsonInput, String cookieName,
			String role, String testCaseName, String idKeyName) {
		Response response = null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		if (testCaseName.contains("Invalid_Token")) {
			token = "xyz";
		} else {
			token = kernelAuthLib.getTokenByRole(role);
		}
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			response = RestClient.postRequestWithBearerToken(url, inputJson, MediaType.APPLICATION_JSON,
					MediaType.APPLICATION_JSON, cookieName, token);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");

			if (testCaseName.toLowerCase().contains("_sid")) {
				writeAutoGeneratedId(response, idKeyName, testCaseName);
			}

			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response postWithBodyAndCookieForAutoGeneratedIdForUrlEncoded(String url, String jsonInput,
			String cookieName, String role, String testCaseName, String idKeyName) {
		Response response = null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		ObjectMapper mapper = new ObjectMapper();
		Map<String, String> map = null;
		try {
			map = mapper.readValue(inputJson, Map.class);
		} catch (JsonProcessingException e) {
			logger.error(e.getStackTrace());
		}
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		logger.info(inputJson);
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			response = RestAssured.given().contentType("application/x-www-form-urlencoded; charset=utf-8")
					.formParams(map).when().post(url);
			logger.info(response.getStatusCode());
			logger.info(response.asString());
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");

			if (testCaseName.toLowerCase().contains("_sid")) {
				writeAutoGeneratedId(response, idKeyName, testCaseName);
			}
			if (testCaseName.contains("UIN_Cookie") || testCaseName.contains("Vid_Cookie")) {
				File fileName = null;
				if (testCaseName.contains("UIN_Cookie"))
					fileName = ESignetUINCookiesFile;
				else
					fileName = ESignetVIDCookiesFile;
				FileUtils.touch(fileName);// File got created
				FileUtils.writeStringToFile(fileName, response.getBody().asString(), StandardCharset.UTF_8.name());
			}

			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response patchWithBodyAndCookieWithAutoGeneratedId(String url, String jsonInput, String cookieName,
			String role, String testCaseName, String idKeyName) {
		Response response = null;
		if (url.contains("ID:")) {
			url = uriKeyWordHandelerUri(url, testCaseName);
		}
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			response = RestClient.patchRequestWithCookie(url, inputJson, MediaType.APPLICATION_JSON,
					MediaType.APPLICATION_JSON, cookieName, token);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			if (testCaseName.toLowerCase().contains("_sid")) {
				writeAutoGeneratedId(response, idKeyName, testCaseName);
			}
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response patchWithBodyAndCookieForAutoGeneratedId(String url, String jsonInput, String cookieName,
			String role, String testCaseName, String idKeyName) {
		Response response = null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			response = RestClient.patchRequestWithCookie(url, inputJson, MediaType.APPLICATION_JSON,
					MediaType.APPLICATION_JSON, cookieName, token);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");

			if (testCaseName.toLowerCase().contains("_sid")) {
				writeAutoGeneratedId(response, idKeyName, testCaseName);
			}

			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response getWithPathParamAndCookieForAutoGeneratedId(String url, String jsonInput, String cookieName,
			String role, String testCaseName, String idKeyName) {
		return getWithPathParamAndCookieForAutoGeneratedId(url, jsonInput, false, cookieName, role, testCaseName, idKeyName,
				false);
	}
    
	protected Response getWithPathParamAndCookieForAutoGeneratedId(String url, String jsonInput, String cookieName,
			String role, String testCaseName, String idKeyName,boolean bothAccessAndIdToken) {
		return getWithPathParamAndCookieForAutoGeneratedId(url, jsonInput, false, cookieName, role, testCaseName, idKeyName,
				bothAccessAndIdToken);
	}
	
	protected Response getWithPathParamAndCookieForAutoGeneratedId(String url, String jsonInput,boolean auditLogCheck, String cookieName,
			String role, String testCaseName, String idKeyName) {
		return getWithPathParamAndCookieForAutoGeneratedId(url, jsonInput, auditLogCheck, cookieName, role, testCaseName, idKeyName,
				false);
	}
	
	protected Response getWithPathParamAndCookieForAutoGeneratedId(String url, String jsonInput, boolean auditLogCheck, String cookieName,
			String role, String testCaseName, String idKeyName, boolean bothAccessAndIdToken) {
		Response response = null;
		jsonInput = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		HashMap<String, String> map = null;
		try {
			map = new Gson().fromJson(jsonInput, new TypeToken<HashMap<String, String>>() {
			}.getType());
		} catch (Exception e) {
			logger.error("Not able to convert jsonrequet to map: " + jsonInput + " Exception: " + e.getMessage());
		}

		if (testCaseName.contains("Resident_Login")) {
			cookieName = COOKIENAMESTATE;
//			JSONObject request = new JSONObject(jsonInput);
//			String state = null;
//			if(request.has("state")) {
//				state = request.get("state").toString();
//				token = state;
//			}
		}
//		else {
		if (bothAccessAndIdToken) {
			token = kernelAuthLib.getTokenByRole(role, ACCESSTOKENCOOKIENAME);
			idToken = kernelAuthLib.getTokenByRole(role, IDTOKENCOOKIENAME);
		} else {
			token = kernelAuthLib.getTokenByRole(role);
		}
//		}

		logger.info("******get request to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(jsonInput) + "</pre>");
		try {
			if (url.contains("{") || url.contains("?")) {
				if (bothAccessAndIdToken) {
					response = RestClient.getRequestWithCookieAndPathParm(url, map, MediaType.APPLICATION_JSON,
							MediaType.APPLICATION_JSON, cookieName, token, IDTOKENCOOKIENAME, idToken);
				} else {
					response = RestClient.getRequestWithCookieAndPathParm(url, map, MediaType.APPLICATION_JSON,
							MediaType.APPLICATION_JSON, cookieName, token);
				}

			} else {
				if (bothAccessAndIdToken) {
					response = RestClient.getRequestWithCookie(url, MediaType.APPLICATION_JSON,
							MediaType.APPLICATION_JSON, cookieName, token, IDTOKENCOOKIENAME, idToken);
				} else {
					response = RestClient.getRequestWithCookie(url, MediaType.APPLICATION_JSON,
							MediaType.APPLICATION_JSON, cookieName, token);
				}

			}

			if (testCaseName.toLowerCase().contains("_sid")) {
				writeAutoGeneratedId(response, idKeyName, testCaseName);
			}
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			
			if (auditLogCheck) {
				JSONObject jsonObject = new JSONObject(jsonInput);
				String timeStamp = jsonObject.getString("requesttime");
				String dbChecker = "TEST_FULLNAME" + BaseTestCase.getLanguageList().get(0);
				try {
					checkDbAndValidate(timeStamp, dbChecker);
				} catch (AdminTestException e) {
					logger.error(e.getStackTrace());
				}
			}
			
			
			return response;

		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response getWithPathParamAndCookieForAutoGeneratedIdForKeyCloak(String url, String jsonInput,
			String cookieName, String role, String testCaseName, String idKeyName) {
		Response response = null;
		jsonInput = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		url = uriKeyWordHandelerUri(url, testCaseName);
		HashMap<String, String> map = null;
		try {
			map = new Gson().fromJson(jsonInput, new TypeToken<HashMap<String, String>>() {
			}.getType());
		} catch (Exception e) {
			logger.error("Not able to convert jsonrequet to map: " + jsonInput + " Exception: " + e.getMessage());
		}

		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******get request to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(jsonInput) + "</pre>");
		try {
			if (url.contains("{") || url.contains("?")) {
				response = RestClient.getRequestWithCookieAndPathParmForKeyCloak(url, map, MediaType.APPLICATION_JSON,
						MediaType.APPLICATION_JSON, cookieName, token);
				if (testCaseName.toLowerCase().contains("_sid")) {
					writeAutoGeneratedIdForKeyCloak(response, idKeyName, testCaseName);
					// writeMap.get("CREDENTIAL_REQUEST");
				}
			} else {
				response = RestClient.getRequestWithCookieForKeyCloak(url, MediaType.APPLICATION_JSON,
						MediaType.APPLICATION_JSON, cookieName, token);
				if (testCaseName.toLowerCase().contains("_sid")) {
					writeAutoGeneratedIdForKeyCloak(response, idKeyName, testCaseName);
				}
			}
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;

		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	public String encodeBase64(String value) {
		String encodedStr;
		try {
			Encoder encoder = Base64.getEncoder();
			encodedStr = encoder.encodeToString(value.getBytes());
			return encodedStr;
		} catch (Exception e) {
			logger.error(e.getStackTrace());
			return "Error While EncodeingBase64";
		}

	}

	protected Response postWithFormPathParamAndFile(String url, String jsonInput, String cookieName, String role,
			String testCaseName, String idKeyName) {
		Response response = null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		JSONObject req = new JSONObject(inputJson);
		HashMap<String, String> formParams = new HashMap<String, String>();
		HashMap<String, String> pathParams = new HashMap<String, String>();

		File filetoUpload = null;
		String fileKeyName = null;
		if (req.has("filePath") && req.has("fileKeyName")) {
			filetoUpload = new File(getResourcePath() + req.get("filePath").toString());
			req.remove("filePath");
			fileKeyName = req.get("fileKeyName").toString();
			req.remove("fileKeyName");
		} else
			logger.error("request doesn't contanin filePath and fileKeyName: " + inputJson);

		if (testCaseName.contains("Resident_UploadDocument")) {
			pathParams.put("transactionId", req.get("transactionId").toString());
			req.remove("transactionId");
			try {
				formParams.put("request", encodeBase64(req.toString()));
			} catch (Exception e) {
				logger.error(e.getStackTrace());
			}
		} else {
			pathParams.put("preRegistrationId", req.get("preRegistrationId").toString());
			req.remove("preRegistrationId");
			formParams.put("Document request", req.toString());
		}
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			response = RestClient.postWithFormPathParamAndFile(url, formParams, pathParams, filetoUpload, fileKeyName,
					MediaType.MULTIPART_FORM_DATA, token);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");

			if (testCaseName.toLowerCase().contains("_sid")) {
				writeAutoGeneratedId(response, idKeyName, testCaseName);
			}
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response postWithParamAndFile(String url, String jsonInput, String cookieName, String role,
			String testCaseName, String idKeyName) {
		return postWithParamAndFile(url, jsonInput, cookieName, role, testCaseName, idKeyName, false);
	}

	protected Response postWithParamAndFile(String url, String jsonInput, String cookieName, String role,
			String testCaseName, String idKeyName, boolean bothAccessAndIdToken) {
		Response response = null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		JSONObject req = new JSONObject(inputJson);

		File filetoUpload = null;
		String fileKeyName = null;
		if (req.has("filePath") && req.has("fileKeyName")) {
			filetoUpload = new File(getResourcePath() + req.get("filePath").toString());
			req.remove("filePath");
			fileKeyName = req.get("fileKeyName").toString();
			req.remove("fileKeyName");
		} else
			logger.error("request doesn't contanin filePath and fileKeyName: " + inputJson);

		HashMap<String, String> map = null;
		try {
			map = new Gson().fromJson(req.toString(), new TypeToken<HashMap<String, String>>() {
			}.getType());
		} catch (Exception e) {
			logger.error("Not able to convert jsonrequet to map: " + jsonInput + " Exception: " + e.getMessage());
		}

		if (bothAccessAndIdToken) {
			token = kernelAuthLib.getTokenByRole(role, ACCESSTOKENCOOKIENAME);
			idToken = kernelAuthLib.getTokenByRole(role, IDTOKENCOOKIENAME);
		} else {
			token = kernelAuthLib.getTokenByRole(role);
		}
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(req.toString()) + "</pre>");
		try {
			if (bothAccessAndIdToken) {
				response = RestClient.postWithParamsAndFile(url, map, filetoUpload, fileKeyName,
						MediaType.MULTIPART_FORM_DATA, token, IDTOKENCOOKIENAME, idToken);
			} else {
				response = RestClient.postWithParamsAndFile(url, map, filetoUpload, fileKeyName,
						MediaType.MULTIPART_FORM_DATA, token);
			}

			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");

			if (testCaseName.toLowerCase().contains("_sid")) {
				writeAutoGeneratedId(response, idKeyName, testCaseName);
			}
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response postWithFormDataAndFile(String url, String jsonInput, String cookieName, String role,
			String testCaseName, String idKeyName) {
		Response response = null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);

		JSONObject req = new JSONObject(inputJson);
		HashMap<String, String> formParams = new HashMap<String, String>();
		formParams.put("category", req.getString("category"));
		formParams.put("operation", req.getString("operation"));
		formParams.put("tableName", req.getString("tableName"));

		String absolueFilePath = null;
		JSONArray josnArray = req.getJSONArray("files");
		for (int index = 0; index < josnArray.length(); index++) {
			String csvFilePath = (String) josnArray.get(index);
			absolueFilePath = getResourcePath() + csvFilePath;
		}
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			response = RestClient.postWithFormDataAndFile(url, formParams, absolueFilePath,
					MediaType.MULTIPART_FORM_DATA, token);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			if (testCaseName.toLowerCase().contains("_sid")) {
				writeAutoGeneratedId(response, idKeyName, testCaseName);
			}

			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response postWithMultipartFormDataAndFile(String url, String jsonInput, String cookieName, String role,
			String testCaseName, String idKeyName) {
		Response response = null;

		jsonInput = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		jsonInput = jsonInput.replace("\r\n", "");

		HashMap<String, String> formParams = new HashMap<String, String>();
		formParams.put("NotificationRequestDTO", jsonInput);
		if (BaseTestCase.languageList.size() == 1)
			formParams.put("langCode", BaseTestCase.languageList.get(0));
		else if (BaseTestCase.languageList.size() == 2)
			formParams.put("langCode", BaseTestCase.languageList.get(0) + "," + BaseTestCase.languageList.get(1));
		else
			formParams.put("langCode", BaseTestCase.languageList.get(0) + "," + BaseTestCase.languageList.get(1) + ","
					+ BaseTestCase.languageList.get(2));
		formParams.put("attachment", "");

		/* String absolueFilePath = null; */
		/*
		 * JSONArray josnArray = req.getJSONArray("files"); for (int index = 0; index <
		 * josnArray.length(); index++) { String csvFilePath = (String)
		 * josnArray.get(index); absolueFilePath = getResourcePath() + csvFilePath; if
		 * (formParams.get("category").equalsIgnoreCase("masterData")) { absolueFilePath
		 * = StringUtils.substringBefore(absolueFilePath, "FilesToUpload") +
		 * "FilesToUpload"; } }
		 */
		/*
		 * File file = new File(absolueFilePath); File[] listFiles = file.listFiles();
		 */
		/*
		 * for (File specificFile : listFiles) { if
		 * (formParams.get("operation").equalsIgnoreCase("insert") &&
		 * specificFile.getName().equals(formParams.get("tableName") + ".csv")) {
		 * specificFile=updateCSV(specificFile.getAbsolutePath(),"OLD",1,0); listFiles =
		 * new File[1]; listFiles[0] = specificFile; } else { if
		 * (formParams.get("operation").equalsIgnoreCase("update") &&
		 * specificFile.getName().equalsIgnoreCase("update" +
		 * formParams.get("tableName") + ".csv")) { listFiles = new File[1];
		 * listFiles[0] = specificFile; } } }
		 */
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(jsonInput) + "</pre>");

		try {
			response = RestClient.postWithMultipartFormDataAndFile(url, formParams, MediaType.MULTIPART_FORM_DATA,
					token);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			if (testCaseName.toLowerCase().contains("_sid")) {
				writeAutoGeneratedId(response, idKeyName, testCaseName);
			}

			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response postWithFormDataAndMultipleFile(String url, String jsonInput, String cookieName, String role,
			String testCaseName, String idKeyName) {
		Response response = null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);

		JSONObject req = new JSONObject(inputJson);
		HashMap<String, String> formParams = new HashMap<String, String>();
		formParams.put("category", req.getString("category"));
		formParams.put("operation", req.getString("operation"));
		formParams.put("tableName", req.getString("tableName"));

		String absolueFilePath = null;
		JSONArray josnArray = req.getJSONArray("files");
		for (int index = 0; index < josnArray.length(); index++) {
			String csvFilePath = (String) josnArray.get(index);
			absolueFilePath = getResourcePath() + csvFilePath;
			if (formParams.get("category").equalsIgnoreCase("masterData")) {
				absolueFilePath = StringUtils.substringBefore(absolueFilePath, "FilesToUpload") + "FilesToUpload";
			}
		}
		File file = new File(absolueFilePath);
		File[] listFiles = file.listFiles();
		for (File specificFile : listFiles) {
			if (formParams.get("operation").equalsIgnoreCase("insert")
					&& specificFile.getName().equals(formParams.get("tableName") + ".csv")) {
				specificFile = updateCSV(specificFile.getAbsolutePath(), "OLD", 1, 0);
				listFiles = new File[1];
				listFiles[0] = specificFile;
			} else {
				if (formParams.get("operation").equalsIgnoreCase("update")
						&& specificFile.getName().equalsIgnoreCase("update" + formParams.get("tableName") + ".csv")) {
					listFiles = new File[1];
					listFiles[0] = specificFile;
				}
			}
		}
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******Post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			response = RestClient.postWithFormDataAndMultipleFile(url, formParams, listFiles,
					MediaType.MULTIPART_FORM_DATA, token);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			if (testCaseName.toLowerCase().contains("_sid")) {
				writeAutoGeneratedId(response, idKeyName, testCaseName);
			}

			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	public static void initialUserCreation() {
		Response response = null;
		String token = kernelAuthLib.getTokenByRole("admin");
		org.json.simple.JSONObject actualRequest_generation = BaseTestCase.getRequestJson("config/bulkUpload.json");
		String url = ApplnURI + propsKernel.getProperty("bulkUploadUrl");

		JSONObject req = new JSONObject(actualRequest_generation);

		HashMap<String, String> formParams = new HashMap<String, String>();
		formParams.put("category", req.getString("category"));
		formParams.put("operation", req.getString("operation"));
		formParams.put("tableName", req.getString("tableName"));

		String absolueFilePath = null;
		JSONArray josnArray = req.getJSONArray("files");
		for (int index = 0; index < josnArray.length(); index++) {
			String csvFilePath = (String) josnArray.get(index);
			absolueFilePath = getResourcePath() + csvFilePath;
			if (formParams.get("category").equalsIgnoreCase("masterData")) {
				absolueFilePath = StringUtils.substringBefore(absolueFilePath, "FilesToUpload") + "FilesToUpload";
			}
		}
		File file = new File(absolueFilePath);
		File[] listFiles = file.listFiles();

		for (File specificFile : listFiles) {
			if (formParams.get("operation").equalsIgnoreCase("insert")
					&& specificFile.getName().equals(formParams.get("tableName") + ".csv")) {
				specificFile = updateCSV(specificFile.getAbsolutePath(), "OLD", 1, 0);
				listFiles = new File[1];
				listFiles[0] = specificFile;
			} else {
				if (formParams.get("operation").equalsIgnoreCase("update")
						&& specificFile.getName().equalsIgnoreCase("update" + formParams.get("tableName") + ".csv")) {
					listFiles = new File[1];
					listFiles[0] = specificFile;
				}
			}
		}
		try {
			response = RestClient.postWithFormDataAndMultipleFile(url, formParams, listFiles,
					MediaType.MULTIPART_FORM_DATA, token);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");

		} catch (Exception e) {
			logger.error("Exception " + e);
		}

	}

	/**
	 * This method will hit put request and return the response
	 * 
	 * @param url
	 * @param jsonInput
	 * @param cookieName
	 * @param role
	 * @return Response
	 */

	protected Response putWithBodyAndCookie(String url, String jsonInput, String cookieName, String role,
			String testCaseName) {
		return putWithBodyAndCookie(url, jsonInput, cookieName, role, testCaseName, false);
	}

	protected Response putWithBodyAndCookie(String url, String jsonInput, String cookieName, String role,
			String testCaseName, boolean bothAccessAndIdToken) {
		Response response = null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		if (bothAccessAndIdToken) {
			token = kernelAuthLib.getTokenByRole(role, ACCESSTOKENCOOKIENAME);
			idToken = kernelAuthLib.getTokenByRole(role, IDTOKENCOOKIENAME);
		} else {
			token = kernelAuthLib.getTokenByRole(role);
		}
		logger.info("******Put request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			if (bothAccessAndIdToken) {
				response = RestClient.putRequestWithCookie(url, inputJson, MediaType.APPLICATION_JSON,
						MediaType.APPLICATION_JSON, cookieName, token, IDTOKENCOOKIENAME, idToken);
			} else {
				response = RestClient.putRequestWithCookie(url, inputJson, MediaType.APPLICATION_JSON,
						MediaType.APPLICATION_JSON, cookieName, token);
			}

			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response putWithPathParamAndCookie(String url, String jsonInput, String cookieName, String role,
			String testCaseName) {
		Response response = null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		HashMap<String, String> map = null;
		try {
			map = new Gson().fromJson(inputJson, new TypeToken<HashMap<String, String>>() {
			}.getType());
		} catch (Exception e) {
			logger.error("Not able to convert jsonrequet to map: " + jsonInput + " Exception: " + e.getMessage());
		}
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******Put request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			response = RestClient.putRequestWithParm(url, map, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON,
					cookieName, token);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response patchWithPathParamAndCookie(String url, String jsonInput, String cookieName, String role,
			String testCaseName) {
		Response response = null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		HashMap<String, String> map = null;
		try {
			map = new Gson().fromJson(inputJson, new TypeToken<HashMap<String, String>>() {
			}.getType());
		} catch (Exception e) {
			logger.error("Not able to convert jsonrequet to map: " + inputJson + " Exception: " + e.getMessage());
		}
		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******Put request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			response = RestClient.patchRequestWithParm(url, map, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON,
					cookieName, token);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response putWithPathParamsBodyAndCookie(String url, String jsonInput, String cookieName, String role,
			String testCaseName, String pathParams) {
		Response response = null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		logger.info("inputJson is::" + inputJson);
		JSONObject req = new JSONObject(inputJson);
		logger.info("req is::" + req);
		HashMap<String, String> pathParamsMap = new HashMap<String, String>();
		String params[] = pathParams.split(",");
		for (String param : params) {
			logger.info("param is::" + param);
			if (req.has(param)) {
				logger.info("req is::" + req);
				pathParamsMap.put(param, req.get(param).toString());
				req.remove(param);
			} else
				logger.error("request doesn't contanin param: " + param + " in: " + inputJson);
		}

		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******put request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(req.toString()) + "</pre>");
		try {
			if (testCaseName.toLowerCase().contains("dynamic"))
				pathParamsMap.put("id", idField);
			response = RestClient.putWithPathParamsBodyAndCookie(url, pathParamsMap, req.toString(),
					MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, cookieName, token);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response putWithPathParamsBodyAndBearerToken(String url, String jsonInput, String cookieName, String role,
			String testCaseName, String pathParams) {
		Response response = null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		logger.info("inputJson is::" + inputJson);
		JSONObject req = new JSONObject(inputJson);
		logger.info("req is::" + req);
		HashMap<String, String> pathParamsMap = new HashMap<String, String>();
		String params[] = pathParams.split(",");
		for (String param : params) {
			logger.info("param is::" + param);
			if (req.has(param)) {
				logger.info("req is::" + req);
				pathParamsMap.put(param, req.get(param).toString());
				req.remove(param);
			} else
				logger.error("request doesn't contanin param: " + param + " in: " + inputJson);
		}
		if (testCaseName.contains("Invalid_Token")) {
			token = "xyz";
		} else {
			token = kernelAuthLib.getTokenByRole(role);
		}
		logger.info("******put request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(req.toString()) + "</pre>");
		try {
			if (testCaseName.toLowerCase().contains("dynamic"))
				pathParamsMap.put("id", idField);
			response = RestClient.putWithPathParamsBodyAndBearerToken(url, pathParamsMap, req.toString(),
					MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, cookieName, token);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response postWithPathParamsBodyAndCookie(String url, String jsonInput, String cookieName, String role,
			String testCaseName, String pathParams) {
		Response response = null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		url = uriKeyWordHandelerUri(url, testCaseName);
		JSONObject req = new JSONObject(inputJson);
		HashMap<String, String> pathParamsMap = new HashMap<String, String>();
		String params[] = pathParams.split(",");
		for (String param : params) {
			if (req.has(param)) {
				pathParamsMap.put(param, req.get(param).toString());
				req.remove(param);
			} else
				logger.error("request doesn't contanin param: " + param + " in: " + inputJson);
		}

		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			response = RestClient.postWithPathParamsBodyAndCookie(url, pathParamsMap, req.toString(),
					MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, cookieName, token);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response postWithPathParamsBodyHeaderAndCookie(String url, String jsonInput, String cookieName,
			String role, String testCaseName, String pathParams) {
		Response response = null;
		String signature = null;
		HashMap<String, String> headers = new HashMap<String, String>();
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		url = uriKeyWordHandelerUri(url, testCaseName);
		JSONObject req = new JSONObject(inputJson);

		HashMap<String, String> pathParamsMap = new HashMap<String, String>();
		String params[] = pathParams.split(",");
		for (String param : params) {
			if (req.has(param)) {
				pathParamsMap.put(param, req.get(param).toString());
				req.remove(param);
			} else
				logger.error("request doesn't contanin param: " + param + " in: " + inputJson);
		}
		if (req.has("signature")) {
			signature = req.get("signature").toString();
			req.remove("signature");
		}
		headers.put(SIGNATURE_HEADERNAME, signature);
		if (req.has("request")) {
			req = new JSONObject(req.get("request").toString());
		}

		inputJson = req.toString();

		if (inputJson.contains("\u200B")) {
			inputJson = inputJson.replaceAll("\u200B", "");
		}
		if (inputJson.contains("\\p{Cf}")) {
			inputJson = inputJson.replaceAll("\\p{Cf}", "");
		}

		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(req.toString()) + "</pre>");
		try {
			response = RestClient.postWithPathParamsBodyHeadersAndCookie(url, pathParamsMap, inputJson,
					MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, cookieName, token, headers);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response postWithQueryParamsBodyAndCookie(String url, String jsonInput, String cookieName, String role,
			String testCaseName, String queryParams, String idKeyName) {
		Response response = null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		url = uriKeyWordHandelerUri(url, testCaseName);
		JSONObject req = new JSONObject(inputJson);
		HashMap<String, String> queryParamsMap = new HashMap<String, String>();
		String params[] = queryParams.split(",");
		for (String param : params) {
			if (req.has(param)) {
				queryParamsMap.put(param, req.get(param).toString());
				req.remove(param);
			} else
				logger.error("request doesn't contanin param: " + param + " in: " + inputJson);
		}

		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******post request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(inputJson) + "</pre>");
		try {
			response = RestClient.postWithQueryParamsBodyAndCookie(url, queryParamsMap, req.toString(),
					MediaType.APPLICATION_JSON, "*/*", cookieName, token);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			if (testCaseName.toLowerCase().contains("_sid")) {
				writeAutoGeneratedId(response, idKeyName, testCaseName);
			}
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response patchWithPathParamsBodyAndCookie(String url, String jsonInput, String cookieName, String role,
			String testCaseName, String pathParams) {
		Response response = null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		JSONObject req = new JSONObject(inputJson);
		HashMap<String, String> pathParamsMap = new HashMap<String, String>();
		String params[] = pathParams.split(",");
		// logger.info("req is:: "+ req);
		for (String param : params) {
			if (req.has(param)) {
				pathParamsMap.put(param, req.get(param).toString());
				// logger.info("pathParamsMap is:: "+ pathParamsMap);
				req.remove(param);
			} else
				logger.error("request doesn't contanin param: " + param + " in: " + inputJson);
		}

		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******put request Json to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(req.toString()) + "</pre>");
		try {
			response = RestClient.patchWithPathParamsBodyAndCookie(url, pathParamsMap, req.toString(),
					MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, cookieName, token);
			// logger.info("req.toString() is"+req.toString());
			// logger.info("pathParamsMap is"+pathParamsMap);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	/**
	 * This method will hit get request and return the response
	 * 
	 * @param url
	 * @param jsonInput
	 * @param cookieName
	 * @param role
	 * @return Response
	 */

	protected Response getWithPathParamAndCookie(String url, String jsonInput, String cookieName, String role,
			String testCaseName) {
		return getWithPathParamAndCookie(url, jsonInput, false, cookieName, role, testCaseName, false);
	}

	protected Response getWithPathParamAndCookie(String url, String jsonInput, String cookieName, String role,
			String testCaseName,  boolean bothAccessAndIdToken) {
		return getWithPathParamAndCookie(url, jsonInput, false, cookieName, role, testCaseName, bothAccessAndIdToken);
	}
	
	protected Response getWithPathParamAndCookie(String url, String jsonInput, boolean auditLogCheck, String cookieName, String role,
			String testCaseName) {
		return getWithPathParamAndCookie(url, jsonInput, auditLogCheck, cookieName, role, testCaseName, false);
	}
	
	protected Response getWithPathParamAndCookie(String url, String jsonInput, boolean auditLogCheck, String cookieName, String role,
			String testCaseName, boolean bothAccessAndIdToken) {
		Response response = null;
		jsonInput = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		HashMap<String, String> map = null;
		try {
			map = new Gson().fromJson(jsonInput, new TypeToken<HashMap<String, String>>() {
			}.getType());
		} catch (Exception e) {
			logger.error("Not able to convert jsonrequet to map: " + jsonInput + " Exception: " + e.getMessage());
		}

		if (bothAccessAndIdToken) {
			token = kernelAuthLib.getTokenByRole(role, ACCESSTOKENCOOKIENAME);
			idToken = kernelAuthLib.getTokenByRole(role, IDTOKENCOOKIENAME);
		} else {
			token = kernelAuthLib.getTokenByRole(role);
		}
		logger.info("******get request to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(jsonInput) + "</pre>");
		try {
			if (url.contains("{") || url.contains("?")) {
				if (bothAccessAndIdToken) {
					response = RestClient.getRequestWithCookieAndPathParm(url, map, MediaType.APPLICATION_JSON,
							MediaType.APPLICATION_JSON, cookieName, token, IDTOKENCOOKIENAME, idToken);
				} else {
					response = RestClient.getRequestWithCookieAndPathParm(url, map, MediaType.APPLICATION_JSON,
							MediaType.APPLICATION_JSON, cookieName, token);
				}

			} else if (testCaseName.contains("IdpAccessToken")) {
				JSONObject request = new JSONObject(jsonInput);
				if (request.has("idpAccessToken")) {
					token = request.get("idpAccessToken").toString();
					request.remove("idpAccessToken");
				}
				response = RestClient.getRequestWithBearerToken(url, MediaType.APPLICATION_JSON,
						MediaType.APPLICATION_JSON, cookieName, token);
			} else {
				if (bothAccessAndIdToken) {
					response = RestClient.getRequestWithCookie(url, MediaType.APPLICATION_JSON,
							MediaType.APPLICATION_JSON, cookieName, token, IDTOKENCOOKIENAME, idToken);
				} else {
					response = RestClient.getRequestWithCookie(url, MediaType.APPLICATION_JSON,
							MediaType.APPLICATION_JSON, cookieName, token);
				}

				if (auditLogCheck) {
					JSONObject jsonObject = new JSONObject(jsonInput);
					String timeStamp = jsonObject.getString("requesttime");
					String dbChecker = "TEST_FULLNAME" + BaseTestCase.getLanguageList().get(0);
					try {
						checkDbAndValidate(timeStamp, dbChecker);
					} catch (AdminTestException e) {
						logger.error(e.getStackTrace());
					}
				}
				
			}
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;

		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response deleteWithPathParamAndCookie(String url, String jsonInput, String cookieName, String role,
			String testCaseName) {
		return deleteWithPathParamAndCookie(url, jsonInput, cookieName, role, testCaseName, false);
	}

	protected Response deleteWithPathParamAndCookie(String url, String jsonInput, String cookieName, String role,
			String testCaseName, boolean bothAccessAndIdToken) {
		Response response = null;
		jsonInput = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		HashMap<String, String> map = null;
		try {
			map = new Gson().fromJson(jsonInput, new TypeToken<HashMap<String, String>>() {
			}.getType());
		} catch (Exception e) {
			logger.error("Not able to convert jsonrequet to map: " + jsonInput + " Exception: " + e.getMessage());
		}

		if (bothAccessAndIdToken) {
			token = kernelAuthLib.getTokenByRole(role, ACCESSTOKENCOOKIENAME);
			idToken = kernelAuthLib.getTokenByRole(role, IDTOKENCOOKIENAME);
		} else {
			token = kernelAuthLib.getTokenByRole(role);
		}
		logger.info("******get request to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(jsonInput) + "</pre>");
		try {
			if (bothAccessAndIdToken) {
				response = RestClient.deleteRequestWithCookieAndPathParm(url, map, MediaType.APPLICATION_JSON,
						MediaType.APPLICATION_JSON, cookieName, token, IDTOKENCOOKIENAME, idToken);
			} else {
				response = RestClient.deleteRequestWithCookieAndPathParm(url, map, MediaType.APPLICATION_JSON,
						MediaType.APPLICATION_JSON, cookieName, token);
			}

			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;

		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response deleteWithPathParamAndCookieForKeyCloak(String url, String jsonInput, String cookieName,
			String role, String testCaseName) {
		Response response = null;
		jsonInput = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		url = uriKeyWordHandelerUri(url, testCaseName);
		HashMap<String, String> map = null;
		try {
			map = new Gson().fromJson(jsonInput, new TypeToken<HashMap<String, String>>() {
			}.getType());
		} catch (Exception e) {
			logger.error("Not able to convert jsonrequet to map: " + jsonInput + " Exception: " + e.getMessage());
		}

		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******get request to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(jsonInput) + "</pre>");
		try {

			response = RestClient.deleteRequestWithCookieAndPathParmForKeyCloak(url, map, MediaType.APPLICATION_JSON,
					MediaType.APPLICATION_JSON, cookieName, token);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;

		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected byte[] getWithPathParamAndCookieForPdf(String url, String jsonInput, String cookieName, String role,
			String testCaseName) {
		return getWithPathParamAndCookieForPdf(url, jsonInput, false, cookieName, role, testCaseName, false);
	}

	protected byte[] getWithPathParamAndCookieForPdf(String url, String jsonInput, String cookieName, String role,
			String testCaseName, boolean bothAccessAndIdToken) {
		return getWithPathParamAndCookieForPdf(url, jsonInput, false, cookieName, role, testCaseName, bothAccessAndIdToken);
	}  
	
	protected byte[] getWithPathParamAndCookieForPdf(String url, String jsonInput, boolean auditLogCheck, String cookieName, String role,
			String testCaseName) {
		return getWithPathParamAndCookieForPdf(url, jsonInput, auditLogCheck, cookieName, role, testCaseName, false);
	}
	
	protected byte[] getWithPathParamAndCookieForPdf(String url, String jsonInput, boolean auditLogCheck, String cookieName, String role,
			String testCaseName, boolean bothAccessAndIdToken) {
		byte[] pdf = null;
		jsonInput = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		HashMap<String, String> map = null;
		try {
			map = new Gson().fromJson(jsonInput, new TypeToken<HashMap<String, String>>() {
			}.getType());
		} catch (Exception e) {
			logger.error("Not able to convert jsonrequet to map: " + jsonInput + " Exception: " + e.getMessage());
		}

		if (bothAccessAndIdToken) {
			token = kernelAuthLib.getTokenByRole(role, ACCESSTOKENCOOKIENAME);
			idToken = kernelAuthLib.getTokenByRole(role, IDTOKENCOOKIENAME);
		} else {
			token = kernelAuthLib.getTokenByRole(role);
		}
		logger.info("******get request to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(jsonInput) + "</pre>");
		
		try {
			if (bothAccessAndIdToken) {
				pdf = RestClient.getPdf(url, map, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, cookieName,
						token, IDTOKENCOOKIENAME, idToken);
			} else {
				pdf = RestClient.getPdf(url, map, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, cookieName,
						token);
			}
			
			if (auditLogCheck) {
				JSONObject jsonObject = new JSONObject(jsonInput);
				String timeStamp = jsonObject.getString("requesttime");
				String dbChecker = "TEST_FULLNAME" + BaseTestCase.getLanguageList().get(0);
				try {
					checkDbAndValidate(timeStamp, dbChecker);
				} catch (AdminTestException e) {
					logger.error(e.getStackTrace());
				}
			}
			return pdf;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return pdf;
		}
	}

	protected byte[] postWithBodyAndCookieForPdf(String url, String jsonInput, String cookieName, String role,
			String testCaseName) {
		return postWithBodyAndCookieForPdf(url, jsonInput, cookieName, role, testCaseName, false);
	}

	protected byte[] postWithBodyAndCookieForPdf(String url, String jsonInput, String cookieName, String role,
			String testCaseName, boolean bothAccessAndIdToken) {
		Response response = null;
		String inputJson = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		url = inputJsonKeyWordHandeler(url, testCaseName);
		if (BaseTestCase.currentModule.equals("resident")) {
			inputJson = smtpOtpHandler(inputJson, testCaseName);
		}
		byte[] pdf = null;
		jsonInput = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		if (bothAccessAndIdToken) {
			token = kernelAuthLib.getTokenByRole(role, ACCESSTOKENCOOKIENAME);
			idToken = kernelAuthLib.getTokenByRole(role, IDTOKENCOOKIENAME);
		} else {
			token = kernelAuthLib.getTokenByRole(role);
		}
		logger.info("******post request to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(jsonInput) + "</pre>");
		try {
			if (bothAccessAndIdToken) {
				pdf = RestClient.postWithBodyForPdf(url, jsonInput, MediaType.APPLICATION_JSON,
						MediaType.APPLICATION_JSON, cookieName, token, IDTOKENCOOKIENAME, idToken);
			} else {
				pdf = RestClient.postWithBodyForPdf(url, jsonInput, MediaType.APPLICATION_JSON,
						MediaType.APPLICATION_JSON, cookieName, token);
			}
			return pdf;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return pdf;
		}
	}

	protected byte[] getWithQueryParamAndCookieForPdf(String url, String jsonInput, String cookieName, String role,
			String testCaseName) {
		return getWithQueryParamAndCookieForPdf(url, jsonInput, cookieName, role, testCaseName, false);
	}

	protected byte[] getWithQueryParamAndCookieForPdf(String url, String jsonInput, String cookieName, String role,
			String testCaseName, boolean bothAccessAndIdToken) {
		byte[] pdf = null;
		jsonInput = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		HashMap<String, String> map = null;
		try {
			map = new Gson().fromJson(jsonInput, new TypeToken<HashMap<String, String>>() {
			}.getType());
		} catch (Exception e) {
			logger.error("Not able to convert jsonrequet to map: " + jsonInput + " Exception: " + e.getMessage());
		}

		if (bothAccessAndIdToken) {
			token = kernelAuthLib.getTokenByRole(role, ACCESSTOKENCOOKIENAME);
			idToken = kernelAuthLib.getTokenByRole(role, IDTOKENCOOKIENAME);
		} else {
			token = kernelAuthLib.getTokenByRole(role);
		}
		logger.info("******get request to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(jsonInput) + "</pre>");
		try {
			if (bothAccessAndIdToken) {
				pdf = RestClient.getPdfWithQueryParm(url, map, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON,
						cookieName, token, IDTOKENCOOKIENAME, idToken);
			} else {
				pdf = RestClient.getPdfWithQueryParm(url, map, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON,
						cookieName, token);
			}

			return pdf;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return pdf;
		}
	}

	protected Response getWithQueryParamAndCookie(String url, String jsonInput, String cookieName, String role,
			String testCaseName) {
		Response response = null;
		jsonInput = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		HashMap<String, String> map = null;
		try {
			map = new Gson().fromJson(jsonInput, new TypeToken<HashMap<String, String>>() {
			}.getType());
		} catch (Exception e) {
			logger.error("Not able to convert jsonrequet to map: " + jsonInput + " Exception: " + e.getMessage());
		}

		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******get request to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(jsonInput) + "</pre>");
		try {
			response = RestClient.getRequestWithCookieAndQueryParm(url, map, MediaType.APPLICATION_JSON,
					MediaType.APPLICATION_JSON, cookieName, token);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e.getMessage());
			return response;
		}
	}

	protected Response PatchWithQueryParamAndCookie(String url, String jsonInput, String cookieName, String role,
			String testCaseName) {
		Response response = null;
		jsonInput = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		HashMap<String, String> map = null;
		try {
			map = new Gson().fromJson(jsonInput, new TypeToken<HashMap<String, String>>() {
			}.getType());
		} catch (Exception e) {
			logger.error("Not able to convert jsonrequet to map: " + jsonInput + " Exception: " + e.getMessage());
		}

		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******get request to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(jsonInput) + "</pre>");
		try {
			response = RestClient.patchRequestWithCookieAndQueryParm(url, map, MediaType.APPLICATION_JSON,
					MediaType.APPLICATION_JSON, cookieName, token);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e.getMessage());
			return response;
		}
	}
	
	public static void closeInputStream(FileInputStream inputStream) {
		if (inputStream != null) {
	        try {
	            inputStream.close();
	        } catch (IOException e) {
	            // Handle the exception
	        }
	    }
	}
	
	public static void closeOutputStream(FileOutputStream outputStream) {
		if (outputStream != null) {
	        try {
	        	outputStream.flush();
	        	outputStream.close();
	        } catch (IOException e) {
	            // Handle the exception
	        }
	    }
	}
	
	public static void closeOutputStreamWriter(OutputStreamWriter outputStreamWriter) {
		if (outputStreamWriter != null) {
	        try {
	        	outputStreamWriter.close();
	        } catch (IOException e) {
	            // Handle the exception
	        }
	    }
	}
	public static void closeDataOutputStream(DataOutputStream dataOutputStream) {
		if (dataOutputStream != null) {
	        try {
	        	dataOutputStream.close();
	        } catch (IOException e) {
	            // Handle the exception
	        }
	    }
	}
	
	public static void closeBufferedWriter(BufferedWriter bufferedWriter) {
		if (bufferedWriter != null) {
	        try {
	        	bufferedWriter.flush();
	        	bufferedWriter.close();
	        } catch (IOException e) {
	            // Handle the exception
	        }
	    }
	}
	
	public static void closeBufferedReader(BufferedReader bufferedReader) {
		if (bufferedReader != null) {
	        try {
	        	bufferedReader.close();
	        } catch (IOException e) {
	            // Handle the exception
	        }
	    }
	}
	
	public static void closeFileWriter(FileWriter fileWriter) {
		if (fileWriter != null) {
	        try {
	        	fileWriter.flush();
	        	fileWriter.close();
	        } catch (IOException e) {
	            // Handle the exception
	        }
	    }
	}
	
	public static void closeFileReader(FileReader fileReader) {
		if (fileReader != null) {
	        try {
	        	fileReader.close();
	        } catch (IOException e) {
	            // Handle the exception
	        }
	    }
	}

	void writeAutoGeneratedId(Response response, String idKeyName, String testCaseName) {
		String fileName = getAutoGenIdFileName(testCaseName);
		JSONObject responseJson = null;
		JSONObject responseBody = null;
		String signature = null;
		FileOutputStream outputStream = null;
		FileInputStream inputStream = null;
		Properties props = new Properties();
		try {
			if (testCaseName.contains("ESignet_GenerateToken") || testCaseName.contains("Esignet_KycCreateAuthReq")) {
				responseBody = new JSONObject(response.getBody().asString());
				if (testCaseName.contains("Esignet_KycCreateAuthReq")) {
					signature = response.getHeader("signature");
				}
			} else {
				responseJson = new JSONObject(response.getBody().asString()).getJSONObject("response");
			}
			inputStream = new FileInputStream(getResourcePath() + fileName);
			props.load(inputStream);
			String fieldNames[] = idKeyName.split(",");

			for (String filedName : fieldNames) {
				if (responseJson != null) {
					String identifierKeyName = getAutogenIdKeyName(testCaseName, filedName);
					if (responseJson.has(filedName))
						props.put(identifierKeyName, responseJson.get(filedName).toString());
					else if (responseJson.has("data")) {
						org.json.JSONArray responseArray = responseJson.getJSONArray("data");

						JSONObject eachJSON = (JSONObject) responseArray.get(0);
						logger.info(eachJSON.get(filedName));
						props.put(identifierKeyName, eachJSON.get(filedName));
					} else if (testCaseName.contains("_OAuthDetailsRequest_") && filedName.equals("encodedResp")) {
						Gson gson = new Gson();
						JsonObject json = gson.fromJson(response.getBody().asString(), JsonObject.class);
						String responseJsonString = json.getAsJsonObject("response").toString();

//						logger.info("response string = " + responseJson.toString());
//						ObjectMapper mapper = new ObjectMapper();
//						String respBody = mapper.writeValueAsString(responseJson.toMap());

//						logger.info("response mapper = " + respBody);
						MessageDigest digest = MessageDigest.getInstance("SHA-256");
						byte[] hash = digest.digest(responseJsonString.getBytes(StandardCharsets.UTF_8));
//						String hashResp = hash.toString();
//						String urlEncodedResp = Base64.getUrlEncoder().encodeToString(hash);
						String urlEncodedResp = Base64.getUrlEncoder().withoutPadding().encodeToString(hash);
						logger.info("encoded response = " + urlEncodedResp);
						props.put(identifierKeyName, urlEncodedResp);
					} else
						props.put(identifierKeyName, responseJson.getJSONObject("identity").get(filedName));
				} else if (responseBody != null) {
					String identifierKeyName = getAutogenIdKeyName(testCaseName, filedName);
					if (responseBody.has(filedName)) {
						props.put(identifierKeyName, responseBody.get(filedName).toString());
					} else if (testCaseName.contains("Esignet_KycCreateAuthReq")) {
						if (filedName.equals("authReqBody")) {
							props.put(identifierKeyName, responseBody.toString());
						} else if (filedName.equals("authSignature")) {
							props.put(identifierKeyName, signature);
						}
					} else
						logger.error("Response doesn't contain autogenerated field: " + filedName
								+ " to write- Response : " + response.asString());
				} else {
					logger.error("Response doesn't contain autogenerated field: " + filedName + " to write- Response : "
							+ response.asString());
				}
			}
			outputStream = new FileOutputStream(getResourcePath() + fileName);
			props.store(outputStream, "autogenerated fields");
			logger.info("added autogenerated fields to property: " + getResourcePath() + fileName);
		} catch (JSONException | IOException | NoSuchAlgorithmException e) {
			logger.error("Exception while getting autogenerated id and writing in property file:" + e.getMessage());
		}finally {
			closeInputStream(inputStream);
			closeOutputStream(outputStream);
		}

	}

	void writeAutoGeneratedIdForKeyCloak(Response response, String idKeyName, String testCaseName) throws IOException {
		// String fileName = getAutoGenIdFileName(testCaseName);
		// String name1 = "CREATE_SHARE";

		// HashMap<String, String> map=new HashMap<String, String>();
		JSONArray responseJson = new JSONArray(response.asString());
		logger.info(responseJson.getJSONObject(0));
		FileOutputStream outputStream = null;
		FileInputStream inputStream = null;
		try {
			if (testCaseName.toLowerCase().contains("keycloakuserdetails")) {

				String fileName = getAutoGenIdFileName(testCaseName);
				JSONObject responseOutputJson = null;

				Properties props = new Properties();
				responseOutputJson = responseJson.getJSONObject(0);
				inputStream = new FileInputStream(getResourcePath() + fileName);
				props.load(inputStream);
				if (responseOutputJson.has("username")) {
					keycloakUsersMap.put("username", responseOutputJson.get("username").toString());
				}
				String fieldNames[] = idKeyName.split(",");
				for (String filedName : fieldNames) {
					if (responseJson.length() != 0) {
						String identifierKeyName = getAutogenIdKeyName(testCaseName, filedName);
						if (responseOutputJson.has(filedName))
							props.put(identifierKeyName, responseOutputJson.get(filedName).toString());
						else
							props.put(identifierKeyName, responseOutputJson.getJSONObject("identity").get(filedName));
					} else {
						logger.error("Response doesn't contain autogenerated field: " + filedName
								+ " to write- Response : " + response.asString());
					}
				}
				outputStream = new FileOutputStream(getResourcePath() + fileName);
				props.store(outputStream, "autogenerated fields");
				logger.info("added autogenerated fields to property: " + getResourcePath() + fileName);

			}

			if (testCaseName.toLowerCase().contains("keycloakroledetails")) {

				for (int i = 0; i < responseJson.length(); i++) { // OR iterate
					JSONObject tmp = responseJson.getJSONObject(i);
					{
						keycloakRolesMap.put(tmp.getString("name"), tmp.getString("id"));

					}
				}
			}
		} finally {
			closeInputStream(inputStream);
			closeOutputStream(outputStream);
		}
	}

	public void writeAutoGeneratedId(String testCaseName, String idName, String value) {
		if (testCaseName == null || idName == null || value == null) {
			logger.error("autogenerated id is not stored as few details not available");
			return;
		}
		String fileName = getAutoGenIdFileName(testCaseName);
		String identifierKeyName = getAutogenIdKeyName(testCaseName, idName);
		FileOutputStream outputStream = null;
		FileInputStream inputStream = null;
		Properties props = new Properties();
		try {
			inputStream = new FileInputStream(getResourcePath() + fileName);
			props.load(inputStream);
			props.put(identifierKeyName, value);
			outputStream = new FileOutputStream(getResourcePath() + fileName);
			props.store(outputStream, "autogenerated fields");
			logger.info("added autogenerated fields to property: " + getResourcePath() + fileName);
		} catch (JSONException | IOException e) {
			logger.error("Exception while getting autogenerated id and writing in property file:" + e.getMessage());
		}finally {
			closeInputStream(inputStream);
			closeOutputStream(outputStream);
		}
	}

	/**
	 * @param testCaseName
	 * @param fieldName
	 * @return testCaseName_fieldname
	 */
	public String getAutogenIdKeyName(String testCaseName, String fieldName) {
		if (testCaseName == null)
			return null;
		int indexof_ = testCaseName.indexOf("_");
		String autogenIdKeyName = testCaseName.substring(indexof_ + 1);
		autogenIdKeyName = autogenIdKeyName + "_" + fieldName;
		logger.info("key for testCase: " + testCaseName + " : " + autogenIdKeyName);
		return autogenIdKeyName;
	}

	public static String getGlobalResourcePath() {
		return MosipTestRunner.getGlobalResourcePath();
	}

	public static String getResourcePath() {
		return getGlobalResourcePath() + "/" + resourceFolderName + "/";
	}

	public static void initiateAdminTest() {
		copyAdminTestResource();
	}

	public static void initiateMasterDataTest() {
		copyMasterDataTestResource();
	}

	public static void initiateMimotoTest() {
		copyMimotoDataTestResource();
	}

	public static void initiateMobileIdTestTest() {
		copyMobileIdTestResource();
	}

	public static void initiateesignetTest() {
		copyEsignetTestResource();
	}

	public static void initiateSyncDataTest() {
		copySyncDataTestResource();
	}
	
	
	public static void copymoduleSpecificAndConfigFile(String moduleName) {
		File destination = null;
		File source = null;
		try {
			destination = new File(RunConfigUtil.getGlobalResourcePath() + "/" + RunConfigUtil.resourceFolderName);
			source = new File(RunConfigUtil.getGlobalResourcePath() + "/" + moduleName);
			FileUtils.copyDirectoryToDirectory(source, destination);

			source = new File(RunConfigUtil.getGlobalResourcePath() + "/config");
			FileUtils.copyDirectoryToDirectory(source, destination);
			logger.info("Copied the test resource successfully for " + moduleName);
		} catch (Exception e) {
			if (source != null && destination != null)
				logger.error("Exception occured while copying the file for : " + moduleName + " Source path : "
						+ source.getAbsolutePath() + " Destination path : " + destination.getAbsolutePath()
						+ " Error : " + e.getMessage());
			else
				logger.error(
						"Exception occured while copying the file for : " + moduleName + " Error : " + e.getMessage());

		}
	}

	public static void copyAdminTestResource() {
		copymoduleSpecificAndConfigFile("admin");
	}

	public static void copyMasterDataTestResource() {
		copymoduleSpecificAndConfigFile("masterdata");
	}

	public static void copyMimotoDataTestResource() {
		copymoduleSpecificAndConfigFile("mimoto");
	}

	public static void copyMobileIdTestResource() {
		copymoduleSpecificAndConfigFile("mobileId");
	}

	public static void copyEsignetTestResource() {
		copymoduleSpecificAndConfigFile("esignet");
	}

	public static void copySyncDataTestResource() {
		copymoduleSpecificAndConfigFile("syncdata");
	}

	public static void initiateKernelTest() {
		copymoduleSpecificAndConfigFile("kernel");
	}

	public static void initiateregProcTest() {
		copymoduleSpecificAndConfigFile("regProc");
	}

	public Object[] getYmlTestData(String ymlPath) {
		String testType = testLevel;
		final ObjectMapper mapper = new ObjectMapper();
		List<TestCaseDTO> testCaseDTOList = new LinkedList<TestCaseDTO>();
		Map<String, Map<String, Map<String, String>>> scriptsMap = loadyaml(ymlPath);
		for (String key : scriptsMap.keySet()) {
			Map<String, Map<String, String>> testCases = scriptsMap.get(key);
			if (testType.equalsIgnoreCase("smoke")) {
				testCases = testCases.entrySet().stream()
						.filter(mapElement -> mapElement.getKey().toLowerCase().contains("smoke")).collect(Collectors
								.toMap(mapElement -> mapElement.getKey(), mapElement -> mapElement.getValue()));
			}
			for (String testCase : testCases.keySet()) {
				TestCaseDTO testCaseDTO = mapper.convertValue(testCases.get(testCase), TestCaseDTO.class);
				testCaseDTO.setTestCaseName(testCase);
				testCaseDTOList.add(testCaseDTO);
			}
		}
		return testCaseDTOList.toArray();
	}

	@SuppressWarnings("unchecked")
	protected Map<String, Map<String, Map<String, String>>> loadyaml(String path) {
		Map<String, Map<String, Map<String, String>>> scriptsMap = null;
		FileInputStream inputStream = null;
		try {
			Yaml yaml = new Yaml();
			inputStream = new FileInputStream(new File(getResourcePath() + path).getAbsoluteFile());
			scriptsMap = (Map<String, Map<String, Map<String, String>>>) yaml.load(inputStream);
		} catch (Exception e) {
			logger.error(e.getMessage());
			return null;
		}finally {
			closeInputStream(inputStream);
		}
		return scriptsMap;
	}

	public String getJsonFromTemplate(String input, String template) {
		return getJsonFromTemplate(input, template, true);

	}

	public String getJsonFromTemplate(String input, String template, boolean readFile) {
		String resultJson = null;
		try {
			Handlebars handlebars = new Handlebars();
			Gson gson = new Gson();
			Type type = new TypeToken<Map<String, Object>>() {
			}.getType();
			logger.info(input);
			Map<String, Object> map = gson.fromJson(input, type);
			String templateJsonString;
			if (readFile) {
				templateJsonString = new String(Files.readAllBytes(Paths.get(getResourcePath() + template + ".hbs")),
						"UTF-8");
			} else {
				templateJsonString = template;
			}

			Template compiledTemplate = handlebars.compileInline(templateJsonString);
			Context context = Context.newBuilder(map).build();
			resultJson = compiledTemplate.apply(context);
		} catch (Exception e) {
			logger.error(e.getStackTrace());
		}
		return resultJson;
	}

	public String getJsonFromTemplateForMapApi(String input, String inputTemplate, HashMap<String, String> map) {
		// TODO Auto-generated method stub
		logger.info(inputTemplate);
		logger.info(input);

		List<String> requiredRoles = getRolesByUser(input.split(":")[1].split("}")[0]);
		keycloakUsersMap.clear();
		org.json.simple.JSONArray josnArray = new org.json.simple.JSONArray();
		for (String role : requiredRoles) {
			org.json.simple.JSONObject jsonObject = new org.json.simple.JSONObject();
			if (map.containsKey(role)) {
				jsonObject.put("id", map.get(role));
				jsonObject.put("name", role);
				josnArray.add(jsonObject);
			}
		}
		logger.info(josnArray.toString());
		return josnArray.toString();

	}

	public List<String> getRolesByUser(String username) {

		return List.of(propsKernel.getProperty("ROLES." + username.replaceAll(" ", "")).split(","));

	}

	public String uriKeyWordHandelerUri(String uri, String testCaseName) {
		if (uri == null) {
			logger.info(" Request Json String is :" + uri);
			return uri;
		}
		if (uri.contains("$KEYCLOAKUSER1$"))
			uri = uri.replace("$KEYCLOAKUSER1$", propsKernel.getProperty("KEYCLOAKUSER1"));
		if (uri.contains("$KEYCLOAKUSER2$"))
			uri = uri.replace("$KEYCLOAKUSER2$", propsKernel.getProperty("KEYCLOAKUSER2"));
		if (uri.contains("$MODULENAME$")) {
			uri = uri.replace("$MODULENAME$", BaseTestCase.certsForModule);
		}

		if (uri.contains("$CERTSDIR$")) {
			uri = uri.replace("$CERTSDIR$", ConfigManager.getauthCertsPath());
		}

		if (uri.contains("$TRANSACTIONID$")) {
			uri = uri.replace("$TRANSACTIONID$", transactionId);
		}

		if (uri.contains("$ID:")) {
			String autoGenIdFileName = getAutoGenIdFileName(testCaseName);
			uri = replaceIdWithAutogeneratedId(uri, "$ID:", autoGenIdFileName);
		}

		return uri;
	}

	public String inputJsonKeyWordHandeler(String jsonString, String testCaseName) {
		if (jsonString == null) {
			logger.info(" Request Json String is :" + jsonString);
			return jsonString;
		}
		if (testCaseName.contains("ESignet_GenerateApiKey"))
			KeycloakUserManager.createKeyCloakUsers(genPartnerName, genPartnerEmail, "AUTH_PARTNER");
		if (jsonString.contains("$THUMBPRINT$")) {
			jsonString = jsonString.replace("$THUMBPRINT$", EncryptionDecrptionUtil.idaFirThumbPrint);
		}
		if (jsonString.contains("$ENCRYPTEDSESSIONKEY$")) {
			jsonString = jsonString.replace("$ENCRYPTEDSESSIONKEY$", encryptedSessionKeyString);
		}
		if (jsonString.contains("$MODULENAME$")) {
			jsonString = jsonString.replace("$MODULENAME$", BaseTestCase.certsForModule);
		}
		if (jsonString.contains("$CERTSDIR$")) {
			jsonString = jsonString.replace("$CERTSDIR$", ConfigManager.getauthCertsPath());
		}

		if (jsonString.contains("$BIOVALUE$")) {
			jsonString = jsonString.replace("$BIOVALUE$", propsBio.getProperty("BioValue"));
		}
		if (jsonString.contains("$BIOVALUEWITHOUTFACE$")) {
			jsonString = jsonString.replace("$BIOVALUEWITHOUTFACE$", propsBio.getProperty("BioValueWithoutFace"));
		}
		if (jsonString.contains("$CLAIMSFROMCONFIG$"))
			jsonString = jsonString.replace("$CLAIMSFROMCONFIG$", getValueFromConfigActuator());
		if (jsonString.contains("$TIMESTAMP$"))
			jsonString = jsonString.replace("$TIMESTAMP$", generateCurrentUTCTimeStamp());
		if (jsonString.contains("$TRANSACTIONID$"))
			jsonString = jsonString.replace("$TRANSACTIONID$", transactionId);
		if (jsonString.contains("$DATESTAMP$"))
			jsonString = jsonString.replace("$DATESTAMP$", generateCurrentUTCDateStamp());
		if (jsonString.contains("$TIMESTAMPL$"))
			jsonString = jsonString.replace("$TIMESTAMPL$", generateCurrentLocalTimeStamp());
		if (jsonString.contains("$RID$"))
			jsonString = jsonString.replace("$RID$", genRid);

		if (jsonString.contains("$SCHEMAVERSION$"))
			jsonString = jsonString.replace("$SCHEMAVERSION$", generateLatestSchemaVersion());
		if (jsonString.contains("$1STLANG$"))
			jsonString = jsonString.replace("$1STLANG$", BaseTestCase.languageList.get(0));
		if (jsonString.contains("$2NDLANG$"))
			jsonString = jsonString.replace("$2NDLANG$", BaseTestCase.languageList.get(1));
		if (jsonString.contains("$3RDLANG$"))
			jsonString = jsonString.replace("$3RDLANG$", BaseTestCase.languageList.get(2));

		if (jsonString.contains("$KEYCLOAKUSER1$"))
			jsonString = jsonString.replace("$KEYCLOAKUSER1$", propsKernel.getProperty("KEYCLOAKUSER1"));
		if (jsonString.contains("$KEYCLOAKUSER2$"))
			jsonString = jsonString.replace("$KEYCLOAKUSER2$", propsKernel.getProperty("KEYCLOAKUSER2"));
		if (jsonString.contains("$RIDDEL$"))
			jsonString = jsonString.replace("$RIDDEL$", genRidDel);
		if (jsonString.contains("$ID:")) {
			String autoGenIdFileName = getAutoGenIdFileName(testCaseName);
			jsonString = replaceIdWithAutogeneratedId(jsonString, "$ID:", autoGenIdFileName);
		}
		if (jsonString.contains("$POLICYGROUPDESC$"))
			jsonString = jsonString.replace("$POLICYGROUPDESC$", genPolicyGroupDesc);

		if (jsonString.contains("$POLICYGROUPNAME$"))
			jsonString = jsonString.replace("$POLICYGROUPNAME$", genPolicyGroupName);

		if (jsonString.contains("$POLICYDESC$"))
			jsonString = jsonString.replace("$POLICYDESC$", genPolicyDesc);

		if (jsonString.contains("$POLICYDESC1$"))
			jsonString = jsonString.replace("$POLICYDESC1$", genPolicyDesc + "pol");

		if (jsonString.contains("$POLICYNAME$"))
			jsonString = jsonString.replace("$POLICYNAME$", genPolicyName);
		
		if (jsonString.contains("$POLICYNAMENONAUTH$"))
			jsonString = jsonString.replace("$POLICYNAMENONAUTH$", genPolicyNameNonAuth);		

		if (jsonString.contains("$POLICYNAME1$"))
			jsonString = jsonString.replace("$POLICYNAME1$", genPolicyName + "pold");

		if (jsonString.contains("$PARTNERID$"))
			jsonString = jsonString.replace("$PARTNERID$", genPartnerName);

		if (jsonString.contains("$PARTNERIDFORDSL$"))
			jsonString = jsonString.replace("$PARTNERIDFORDSL$", genPartnerNameForDsl);

		if (jsonString.contains("$PARTNERID1$"))
			jsonString = jsonString.replace("$PARTNERID1$", genPartnerName + "2n");
		
		if (jsonString.contains("$PARTNERIDNONAUTH$"))
			jsonString = jsonString.replace("$PARTNERIDNONAUTH$", genPartnerNameNonAuth);
		
		if (jsonString.contains("$RANDOMPARTNEREMAIL$"))
			jsonString = jsonString.replace("$RANDOMPARTNEREMAIL$", "automation" + generateRandomNumberString(15)
			+ "@mosip.net");

		if (jsonString.contains("$PARTNEREMAIL1$"))
			jsonString = jsonString.replace("$PARTNEREMAIL1$", "12d" + genPartnerEmail);

		if (jsonString.contains("$PARTNEREMAIL$"))
			jsonString = jsonString.replace("$PARTNEREMAIL$", genPartnerEmail);

		if (jsonString.contains("$PARTNEREMAILFORDSL$"))
			jsonString = jsonString.replace("$PARTNEREMAILFORDSL$", genPartnerEmailForDsl);
		
		if (jsonString.contains("$PARTNEREMAILNONAUTH$"))
			jsonString = jsonString.replace("$PARTNEREMAILNONAUTH$", genPartnerEmailNonAuth);

		if (jsonString.contains("$MISPPOLICYGROUPDESC$"))
			jsonString = jsonString.replace("$MISPPOLICYGROUPDESC$", genMispPolicyGroupDesc);

		if (jsonString.contains("$MISPPOLICYGROUPNAME$"))
			jsonString = jsonString.replace("$MISPPOLICYGROUPNAME$", genMispPolicyGroupName);

		if (jsonString.contains("$MISPPOLICYDESC$"))
			jsonString = jsonString.replace("$MISPPOLICYDESC$", genMispPolicyDesc);

		if (jsonString.contains("$MISPPOLICYNAME$"))
			jsonString = jsonString.replace("$MISPPOLICYNAME$", genMispPolicyName);
		
		if (jsonString.contains("$RANDOMPOLICYNAME$"))
			jsonString = jsonString.replace("$RANDOMPOLICYNAME$", generateRandomAlphaNumericString(15));
		
		if (jsonString.contains("$RANDOMPARTNERID$"))
			jsonString = jsonString.replace("$RANDOMPARTNERID$", generateRandomAlphaNumericString(15));

		if (jsonString.contains("$MISPPARTNERID$"))
			jsonString = jsonString.replace("$MISPPARTNERID$", genMispPartnerName);

		if (jsonString.contains("$MISPPARTNEREMAIL$"))
			jsonString = jsonString.replace("$MISPPARTNEREMAIL$", genMispPartnerEmail);

		if (jsonString.contains("$CACERT$")) {
			JSONObject request = new JSONObject(jsonString);
			String partnerId = null;
			if (request.has("partnerId")) {
				partnerId = request.get("partnerId").toString();
				request.remove("partnerId");
			}
			JSONObject certificateValue = PartnerRegistration.getDeviceCertificates(partnerId, "RELYING_PARTY");
			String caFtmCertValue = certificateValue.getString("caCertificate");

			// caFtmCertValue = caFtmCertValue.replaceAll("\r\n", "\\\\n");
			// caFtmCertValue = caFtmCertValue.replaceAll("\n", "\\\\n");

			if (System.getProperty("os.name").toLowerCase().contains("windows") == true) {
				caFtmCertValue = caFtmCertValue.replaceAll("\r\n", "\\\\n");
			} else {
				caFtmCertValue = caFtmCertValue.replaceAll("\n", "\\\\n");
			}

			jsonString = jsonString.replace("$CACERT$", caFtmCertValue);

		}

		if (jsonString.contains("$MISPCACERT$")) {
			JSONObject request = new JSONObject(jsonString);
			String partnerId = null;
			if (request.has("partnerId")) {
				partnerId = request.get("partnerId").toString();
				request.remove("partnerId");
			}
			JSONObject certificateValue = PartnerRegistration.getDeviceCertificates(partnerId, "MISP");
			String caFtmCertValue = certificateValue.getString("caCertificate");

			// caFtmCertValue = caFtmCertValue.replaceAll("\r\n", "\\\\n");
			// caFtmCertValue = caFtmCertValue.replaceAll("\n", "\\\\n");

			if (System.getProperty("os.name").toLowerCase().contains("windows") == true) {
				caFtmCertValue = caFtmCertValue.replaceAll("\r\n", "\\\\n");
			} else {
				caFtmCertValue = caFtmCertValue.replaceAll("\n", "\\\\n");
			}

			jsonString = jsonString.replace("$MISPCACERT$", caFtmCertValue);

		}

		if (jsonString.contains("$INTERCERT$")) {
			JSONObject request = new JSONObject(jsonString);
			String partnerId = null;
			if (request.has("partnerId")) {
				partnerId = request.get("partnerId").toString();
				request.remove("partnerId");
			}

			JSONObject certificateValue = PartnerRegistration.getDeviceCertificates(partnerId, "RELYING_PARTY");
			String interFtmCertValue = certificateValue.getString("interCertificate");

			if (System.getProperty("os.name").toLowerCase().contains("windows") == true) {
				interFtmCertValue = interFtmCertValue.replaceAll("\r\n", "\\\\n");
			} else {
				interFtmCertValue = interFtmCertValue.replaceAll("\n", "\\\\n");
			}

			jsonString = jsonString.replace("$INTERCERT$", interFtmCertValue);

		}

		if (jsonString.contains("$MISPINTERCERT$")) {
			JSONObject request = new JSONObject(jsonString);
			String partnerId = null;
			if (request.has("partnerId")) {
				partnerId = request.get("partnerId").toString();
				request.remove("partnerId");
			}
			JSONObject certificateValue = PartnerRegistration.getDeviceCertificates(partnerId, "MISP");
			String interFtmCertValue = certificateValue.getString("interCertificate");

			if (System.getProperty("os.name").toLowerCase().contains("windows") == true) {
				interFtmCertValue = interFtmCertValue.replaceAll("\r\n", "\\\\n");
			} else {
				interFtmCertValue = interFtmCertValue.replaceAll("\n", "\\\\n");
			}

			jsonString = jsonString.replace("$MISPINTERCERT$", interFtmCertValue);

		}

		if (jsonString.contains("$PARTNERCERT$")) {
			JSONObject request = new JSONObject(jsonString);
			String partnerId = null;
			if (request.has("request")) {
				partnerId = request.getJSONObject("request").get("partnerId").toString();
			}

			JSONObject certificateValue = PartnerRegistration.getDeviceCertificates(partnerId, "RELYING_PARTY");
			String partnerFtmCertValue = certificateValue.getString("partnerCertificate");

			if (System.getProperty("os.name").toLowerCase().contains("windows") == true) {
				partnerFtmCertValue = partnerFtmCertValue.replaceAll("\r\n", "\\\\r\\\\n");
			} else {
				partnerFtmCertValue = partnerFtmCertValue.replaceAll("\n", "\\\\r\\\\n");
			}
			jsonString = jsonString.replace("$PARTNERCERT$", partnerFtmCertValue);

		}

		if (jsonString.contains("$MISPPARTNERCERT$")) {
			JSONObject request = new JSONObject(jsonString);
			String partnerId = null;
			if (request.has("request")) {
				partnerId = request.getJSONObject("request").get("partnerId").toString();
			}
			JSONObject certificateValue = PartnerRegistration.getDeviceCertificates(partnerId, "MISP");
			String partnerFtmCertValue = certificateValue.getString("partnerCertificate");

			if (System.getProperty("os.name").toLowerCase().contains("windows") == true) {
				partnerFtmCertValue = partnerFtmCertValue.replaceAll("\r\n", "\\\\r\\\\n");
			} else {
				partnerFtmCertValue = partnerFtmCertValue.replaceAll("\n", "\\\\r\\\\n");
			}
			jsonString = jsonString.replace("$MISPPARTNERCERT$", partnerFtmCertValue);

		}

		if (jsonString.contains("$PUBLICKEY$")) {
			jsonString = jsonString.replace("$PUBLICKEY$", MosipTestRunner.generatePulicKey());
			publickey = JsonPrecondtion.getJsonValueFromJson(jsonString, "request.publicKey");
		}
		if (jsonString.contains("$PUBLICKEYFORBINDING$")) {
			jsonString = jsonString.replace("$PUBLICKEYFORBINDING$", MosipTestRunner.generatePublicKeyForMimoto());
		}	
		if (jsonString.contains("$PARTNERID$")) {
			String getPartnerId = getPartnerId(jsonString, testCaseName);
			// jsonString = getPartnerId(jsonString, getPartnerId);
			jsonString = jsonString.replace("$PARTNERID$", getPartnerId);
		}
		if (jsonString.contains("$APIKEY$")) {
			String getApiKey = getAPIKey(jsonString, testCaseName);
			// jsonString = getPartnerId(jsonString, getPartnerId);
			jsonString = jsonString.replace("$APIKEY$", getApiKey);
		}

		if (jsonString.contains("$IDENTITYJSON$")) {
			jsonString = jsonString.replace("$IDENTITYJSON$", generateIdentityJson(testCaseName));
		}
		if (jsonString.contains("$RANDOMID$")) {
			jsonString = jsonString.replace("$RANDOMID$2", randomId2);
			jsonString = jsonString.replace("$RANDOMID$", randomId);
		}
		if (jsonString.contains("$RANDOMUUID$")) {
			UUID uuid = UUID.randomUUID();

			// converts the randomly generated UUID into String
			String uuidAsString = uuid.toString();
			jsonString = jsonString.replace("$RANDOMUUID$", uuidAsString);
		}
		if (jsonString.contains("$BASEURI$")) {
			jsonString = jsonString.replace("$BASEURI$", ApplnURI);
		}
		if (jsonString.contains("$IDPUSER$")) {
			jsonString = jsonString.replace("$IDPUSER$", propsKernel.getProperty("idpClientId"));
		}
		if (jsonString.contains("$OIDCCLIENT$")) {
			String clientId = getValueFromActuator("resident-default.properties", "mosip.iam.module.clientID");
			jsonString = jsonString.replace("$OIDCCLIENT$", clientId);
		}
		if (jsonString.contains("$IDPREDIRECTURI$")) {
			String redirectUri = ApplnURI.replace("api-internal", "healthservices") + "/userprofile";

			jsonString = jsonString.replace("$IDPREDIRECTURI$", redirectUri);
		}
		if (jsonString.contains("$BASE64URI$")) {
			String redirectUri = ApplnURI.replace("api-internal", "resident")
					+ propsKernel.getProperty("currentUserURI");
			String encodedRedirectUri = encodeBase64(redirectUri);

			jsonString = jsonString.replace("$BASE64URI$", encodedRedirectUri);
		}
		if (jsonString.contains("$JWKKEY$")) {
			String oidcJwkKey = MosipTestRunner.generateJWKPublicKey();
			jsonString = jsonString.replace("$JWKKEY$", oidcJwkKey.toString());
		}
		if (jsonString.contains("$BINDINGJWKKEY$")) {
			String bindingJwkKey = null;
			if (triggerIdPKeyGen3) {
				bindingJwkKey = MosipTestRunner.generateJWKPublicKey();
				writeFileAsString(bindingJWK1, bindingJwkKey);
				triggerIdPKeyGen3 = false;
			} else {
				bindingJwkKey = getJWKKey(bindingJWK1);
			}
			jsonString = jsonString.replace("$BINDINGJWKKEY$", bindingJwkKey.toString());
		}

		if (jsonString.contains("$BINDINGJWKKEYVID$")) {
			String bindingJwkKey = null;
			if (triggerIdPKeyGen4) {
				bindingJwkKey = MosipTestRunner.generateJWKPublicKey();
				writeFileAsString(bindingJWKVid, bindingJwkKey);
				triggerIdPKeyGen4 = false;
			} else {
				bindingJwkKey = getJWKKey(bindingJWKVid);
			}
			jsonString = jsonString.replace("$BINDINGJWKKEYVID$", bindingJwkKey.toString());
		}
		if (jsonString.contains("$BINDINGCONSENTJWKKEY$")) {
			String bindingConsentJwkKey = null;
			if (triggerIdPKeyGen5) {
				bindingConsentJwkKey = MosipTestRunner.generateJWKPublicKey();
				writeFileAsString(bindingConsentJWK, bindingConsentJwkKey);
				triggerIdPKeyGen5 = false;
			} else {
				bindingConsentJwkKey = getJWKKey(bindingConsentJWK);
			}
			jsonString = jsonString.replace("$BINDINGCONSENTJWKKEY$", bindingConsentJwkKey.toString());
		}
		if (jsonString.contains("$OIDCJWKKEY$")) {
			String oidcJwkKey = null;
			if (triggerIdPKeyGen1) {
				oidcJwkKey = MosipTestRunner.generateJWKPublicKey();
				writeFileAsString(oidcJWK1, oidcJwkKey);
				triggerIdPKeyGen1 = false;
			} else {
				oidcJwkKey = getJWKKey(oidcJWK1);
			}
			jsonString = jsonString.replace("$OIDCJWKKEY$", oidcJwkKey.toString());
		}
		if (jsonString.contains("$OIDCJWKKEY2$")) {
			String oidcJwkKey = null;
			if (triggerIdPKeyGen2) {
				oidcJwkKey = MosipTestRunner.generateJWKPublicKey();
				writeFileAsString(oidcJWK2, oidcJwkKey);
				triggerIdPKeyGen2 = false;
			} else {
				oidcJwkKey = getJWKKey(oidcJWK2);
			}
			jsonString = jsonString.replace("$OIDCJWKKEY2$", oidcJwkKey);
		}
		if (jsonString.contains("$CLIENT_ASSERTION_JWK$")) {
			String oidcJWKKeyString = getJWKKey(oidcJWK1);
			// String oidcJWKKeyString = props.getProperty("privateKey");
			logger.info("oidcJWKKeyString =" + oidcJWKKeyString);
			try {
				oidcJWKKey1 = RSAKey.parse(oidcJWKKeyString);
				logger.info("oidcJWKKey1 =" + oidcJWKKey1);
			} catch (java.text.ParseException e) {
				logger.error(e.getStackTrace());
			}
			JSONObject request = new JSONObject(jsonString);
			String client_id = null;
			if (request.has("client_id")) {
				client_id = request.get("client_id").toString();
			}
			jsonString = jsonString.replace("$CLIENT_ASSERTION_JWK$", signJWKKey(client_id, oidcJWKKey1));
		}
		if (jsonString.contains("$IDPCLIENTPAYLOAD$")) {
			String clientId = getValueFromActuator("resident-default.properties", "mosip.iam.module.clientID");
			String esignetBaseURI = getValueFromActuator("resident-default.properties", "mosip.iam.token_endpoint");
			int idTokenExpirySecs = Integer.parseInt(getValueFromEsignetActuator("esignet-default.properties", "mosip.esignet.id-token-expire-seconds"));
			int accessTokenExpirySecs = Integer.parseInt(getValueFromEsignetActuator("esignet-default.properties", "mosip.esignet.access-token-expire-seconds"));
			
			Instant instant = Instant.now();

			// print Instant Value
			logger.info("Current Instant: " + instant);

			// get epochValue using getEpochSecond
			long epochValue = instant.getEpochSecond();

			org.json.simple.JSONObject payloadBody = getRequestJson(esignetPayload);
			payloadBody.put("sub", clientId);
			payloadBody.put("iss", clientId);
			payloadBody.put("aud", esignetBaseURI);
			payloadBody.put("exp", epochValue + idTokenExpirySecs);
			payloadBody.put("iat", epochValue);

			String encodedPayload = encodeBase64(payloadBody.toString());
			jsonString = jsonString.replace("$IDPCLIENTPAYLOAD$", encodedPayload);
		}
		if (jsonString.contains("$WLATOKEN$")) {
			String bindingJWKKeyString = getJWKKey(bindingJWK1);
			logger.info("bindingJWKKeyString =" + bindingJWKKeyString);
			try {
				bindingJWKKey = RSAKey.parse(bindingJWKKeyString);
				logger.info("bindingJWKKey =" + bindingJWKKey);
			} catch (java.text.ParseException e) {
				logger.error(e.getStackTrace());
			}

			String individualId = null;
			String wlaToken = null;
			String certificate = getJWKKey(BINDINGCERTFile);
			JSONObject request = new JSONObject(jsonString);
			individualId = request.getJSONObject("request").get("individualId").toString();
			try {
				wlaToken = getWlaToken(individualId, bindingJWKKey, certificate);
			} catch (Exception e) {
				logger.error(e.getStackTrace());
			}
			jsonString = jsonString.replace("$WLATOKEN$", wlaToken);
		}

		if (jsonString.contains("$WLATOKENVID$")) {
			String bindingJWKKeyString = getJWKKey(bindingJWKVid);
			logger.info("bindingJWKKeyString =" + bindingJWKKeyString);
			try {
				bindingJWKKeyVid = RSAKey.parse(bindingJWKKeyString);
				logger.info("bindingJWKKey =" + bindingJWKKeyVid);
			} catch (java.text.ParseException e) {
				logger.error(e.getStackTrace());
			}

			String individualId = null;
			String wlaToken = null;
			String certificate = getJWKKey(BINDINGCERTFileVid);
			JSONObject request = new JSONObject(jsonString);
			individualId = request.getJSONObject("request").get("individualId").toString();
			try {
				wlaToken = getWlaToken(individualId, bindingJWKKeyVid, certificate);
			} catch (Exception e) {
				logger.error(e.getStackTrace());
			}
			jsonString = jsonString.replace("$WLATOKENVID$", wlaToken);
		}
		if (jsonString.contains("$WLATOKENCONSENT$")) {
			String bindingConsentJWKKeyString = getJWKKey(bindingConsentJWK);
			logger.info("bindingConsentJWKKeyString =" + bindingConsentJWKKeyString);
			try {
				bindingConsentJWKKey = RSAKey.parse(bindingConsentJWKKeyString);
				logger.info("bindingJWKKey =" + bindingConsentJWKKey);
			} catch (java.text.ParseException e) {
				logger.error(e.getStackTrace());
			}

			String individualId = null;
			String wlaToken = null;
			String certificate = getJWKKey(BINDINGCERTCONSENTFile);
			JSONObject request = new JSONObject(jsonString);
			individualId = request.getJSONObject("request").get("individualId").toString();
			try {
				wlaToken = getWlaToken(individualId, bindingConsentJWKKey, certificate);
			} catch (Exception e) {
				logger.error(e.getStackTrace());
			}
			jsonString = jsonString.replace("$WLATOKENCONSENT$", wlaToken);
		}
		if (jsonString.contains("$REMOVE$")) // Keep this condition at last to avoid exception
			jsonString = removeObject(new JSONObject(jsonString));

		return jsonString;
	}

	public String getPartnerId(String jsonString, String partnerId) {
		String uriParts[] = PartnerRegistration.partnerKeyUrl.split("/");
		return uriParts[uriParts.length - 2];
	}

	public String getAPIKey(String jsonString, String apiKey) {
		String uriParts[] = PartnerRegistration.partnerKeyUrl.split("/");
		return uriParts[uriParts.length - 1];
	}

	public String getAutoGenIdFileName(String testCaseName) {
		if (testCaseName == null)
			return null;
		if (testCaseName.toLowerCase().startsWith("admin"))
			return adminAutoGeneratedIdPropFileName;
		else if (testCaseName.toLowerCase().startsWith("master"))
			return masterDataAutoGeneratedIdPropFileName;
		else if (testCaseName.toLowerCase().startsWith("sync"))
			return syncDataAutoGeneratedIdPropFileName;
		else if (testCaseName.toLowerCase().startsWith("prereg"))
			return preregAutoGeneratedIdPropFileName;
		else if (testCaseName.toLowerCase().startsWith("partner"))
			return partnerAutoGeneratedIdPropFileName;
		else if (testCaseName.toLowerCase().startsWith("idrepo"))
			return idrepoAutoGeneratedIdPropFileName;
		else if (testCaseName.toLowerCase().startsWith("resident"))
			return residentAutoGeneratedIdPropFileName;
		else if (testCaseName.toLowerCase().startsWith("regproc"))
			return regProcAutoGeneratedIdPropFileName;
		else if (testCaseName.toLowerCase().startsWith("auth"))
			return authAutoGeneratedIdPropFileName;
		else if (testCaseName.toLowerCase().startsWith("prerequisite"))
			return prerequisiteAutoGeneratedIdPropFileName;
		else if (testCaseName.toLowerCase().startsWith("mobileid"))
			return mobileIdAutoGeneratedIdPropFileName;
		else if (testCaseName.toLowerCase().startsWith("esignet"))
			return esignetAutoGeneratedIdPropFileName;
		else if (testCaseName.toLowerCase().startsWith("mimoto"))
			return mimotoAutoGeneratedIdPropFileName;
		return null;
	}

	public String getAutoGeneratedFieldValue(String inputFromYml, String testCaseName) {
		String autoGenIdFileName = getAutoGenIdFileName(testCaseName);
		if (!inputFromYml.contains("$ID:"))
			return "Input doesn't contain autogenerateIdKey";
		String keyForIdProperty = StringUtils.substringBetween(inputFromYml, "$ID:", "$");
		Properties props = new Properties();
		FileInputStream inputStream = null;
		try {
			inputStream = new FileInputStream(getResourcePath() + autoGenIdFileName);
			props.load(inputStream);
		} catch (IOException e) {
			logger.error("Exception while loading the autogenerated id: " + e.getMessage());
		}finally {
			closeInputStream(inputStream);
		}
		String autoGeneratedFieldValue = props.getProperty(keyForIdProperty);
		return autoGeneratedFieldValue;
	}

	public String updateTimestampOtp(String otpIdentyEnryptRequest) {
		otpIdentyEnryptRequest = JsonPrecondtion.parseAndReturnJsonContent(otpIdentyEnryptRequest,
				generateCurrentUTCTimeStamp(), "identityRequest.timestamp");
		if (proxy)
			otpIdentyEnryptRequest = JsonPrecondtion.parseAndReturnJsonContent(otpIdentyEnryptRequest,
					props.getProperty("proxyOTP"), "identityRequest.otp");
		else
			return otpIdentyEnryptRequest;

		return otpIdentyEnryptRequest;
	}

	public OutputValidationDto customStatusCodeResponse(String responseStatusCode, String expectedOutputCode,
			String testCaseName) {
		OutputValidationDto customResponse = new OutputValidationDto();
		customResponse.setActualValue(responseStatusCode);
		customResponse.setExpValue(expectedOutputCode);
		customResponse.setFieldName("status");
		if (customResponse.getActualValue().equals(customResponse.getExpValue())) {
			customResponse.setStatus("PASS");
		} else {
			customResponse.setStatus("FAIL");
		}

		return customResponse;
	}

	public static String generateCurrentUTCTimeStamp() {
		Date date = new Date();
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
		dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
		return dateFormat.format(date);
	}

	public static String generateCurrentUTCDateStamp() {
		Date date = new Date();
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
		return dateFormat.format(date);
	}

	@SuppressWarnings("unchecked")
	public String generateIdentityJson(String testCaseName) {
		org.json.simple.JSONObject actualrequest = getRequestJson(UpdateUinRequest);
		logger.info(actualrequest);
		org.json.simple.JSONObject identityObect = (org.json.simple.JSONObject) actualrequest.get("identity");
		logger.info(identityObect);
		identityObect.replace("IDSchemaVersion", "IDSchemaVersion", generateLatestSchemaVersion());
		org.json.simple.JSONArray ja_data = (org.json.simple.JSONArray) identityObect.get("addressLine3");
		logger.info(actualrequest);
		for (int i = 0; i < ja_data.size(); i++) {
			org.json.simple.JSONObject jsonObj = (org.json.simple.JSONObject) ja_data.get(i);
			jsonObj.replace("language", "languageValue", BaseTestCase.languageList.get(0));
			jsonObj.replace("value", "valueOfAttribute", props.getProperty("ValuetoBeUpdate"));
		}
		logger.info(ja_data);
		String IdObj = (String) identityObect.get("UIN");
		String finalString = null;
		org.json.simple.JSONObject finalObject = new org.json.simple.JSONObject();
		if (!IdObj.isEmpty()) {
			String autoGenIdFileName = getAutoGenIdFileName(testCaseName);
			finalString = replaceIdWithAutogeneratedId(identityObect.toString(), "$ID:", autoGenIdFileName);
			logger.info(finalString);
			finalObject = new org.json.simple.JSONObject();
			JSONParser parser = new JSONParser();

			try {
				finalObject.put("identity", parser.parse(finalString));
			} catch (ParseException e) {
				logger.error(e.getStackTrace());
			}
		}
		String body = Base64.getEncoder().encodeToString(finalObject.toString().getBytes());
		return body;
	}

	private String generateCurrentLocalTimeStamp() {
		Date date = new Date();
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
		return dateFormat.format(date);
	}

	private String replaceIdWithAutogeneratedId(String jsonString, String idKey, String autoGenIdFileName) {
		if (!jsonString.contains(idKey))
			return jsonString;
		else {
			String keyForIdProperty = StringUtils.substringBetween(jsonString, idKey, "$");
			String keyToReplace = idKey + keyForIdProperty + "$";
			Properties props = new Properties();
			FileInputStream inputStream = null;
			try {
				inputStream = new FileInputStream(getResourcePath() + autoGenIdFileName);
				props.load(inputStream);
			} catch (IOException e) {
				logger.error("Exception while loading the autogenerated id: " + e.getMessage());
			}finally {
				closeInputStream(inputStream);
			}
			if (keyForIdProperty.contains("time_slot_from")) {
				String time = props.getProperty(keyForIdProperty);
				if (time.compareTo("12:00") >= 0)
					time += " PM";
				else
					time += " AM";
				jsonString = jsonString.replace(keyToReplace, time);
			} else
				jsonString = jsonString.replace(keyToReplace, props.getProperty(keyForIdProperty));
			if (jsonString.contains("\u200B")) {
				jsonString = jsonString.replaceAll("\u200B", "");
			}
			if (jsonString.contains("\\p{Cf}")) {
				jsonString = jsonString.replaceAll("\\p{Cf}", "");
			}

			jsonString = replaceIdWithAutogeneratedId(jsonString, idKey, autoGenIdFileName);
		}
		if (jsonString.contains("\u200B")) {
			jsonString = jsonString.replaceAll("\u200B", "");
		}
		if (jsonString.contains("\\p{Cf}")) {
			jsonString = jsonString.replaceAll("\\p{Cf}", "");
		}
		return jsonString;
	}

	public String removeObject(JSONObject object) {
		Iterator<String> keysItr = object.keys();
		while (keysItr.hasNext()) {
			String key = keysItr.next();
			Object value = object.get(key);
			if (value instanceof JSONArray) {
				JSONArray array = (JSONArray) value;
				String finalarrayContent = "";
				if (array.length() != 0) {
					for (int i = 0; i < array.length(); ++i) {
						if (!array.toString().contains("{") && !array.toString().contains("}")) {
							Set<String> arr = new HashSet<String>();
							for (int k = 0; k < array.length(); k++) {
								arr.add(array.getString(k));
							}
							finalarrayContent = removObjectFromArray(arr);
						} else {
							String arrayContent = removeObject(new JSONObject(array.get(i).toString()),
									finalarrayContent);
							// if (!arrayContent.equals("{}"))
							finalarrayContent = finalarrayContent + "," + arrayContent;
						}
					}
					finalarrayContent = finalarrayContent.substring(1, finalarrayContent.length());
					object.put(key, new JSONArray("[" + finalarrayContent + "]"));
				} else
					object.put(key, new JSONArray("[]"));

			} else if (value instanceof JSONObject) {
				String objectContent = removeObject(new JSONObject(value.toString()));
				object.put(key, new JSONObject(objectContent));
			}
			if (value.toString().equals("$REMOVE$")) {
				object.remove(key);
				keysItr = object.keys();
			}
		}
		return object.toString();
	}

	private String removeObject(JSONObject object, String tempArrayContent) {
		Iterator<String> keysItr = object.keys();
		while (keysItr.hasNext()) {
			String key = keysItr.next();
			Object value = object.get(key);
			if (value instanceof JSONArray) {
				JSONArray array = (JSONArray) value;
				for (int i = 0; i < array.length(); ++i) {
					String arrayContent = removeObject(new JSONObject(array.get(i).toString()));
					object.put(key, new JSONArray("[" + arrayContent + "]"));
				}
			} else if (value instanceof JSONObject) {
				String objectContent = removeObject(new JSONObject(value.toString()));
				object.put(key, new JSONObject(objectContent));
			}
			if (value.toString().equals("$REMOVE$")) {
				object.remove(key);
				keysItr = object.keys();
			}
		}
		return object.toString();
	}

	private String removObjectFromArray(Set<String> content) {
		String array = "[";
		for (String str : content) {
			if (!str.contains("$REMOVE$"))
				array = array + '"' + str + '"' + ",";
		}
		array = array.substring(0, array.length() - 1);
		array = array + "]";
		return array;
	}

	protected Response postWithOnlyPathParamAndCookie(String url, String jsonInput, String cookieName, String role,
			String testCaseName) {
		return postWithOnlyPathParamAndCookie(url, jsonInput, cookieName, role, testCaseName, false);
	}

	protected Response postWithOnlyPathParamAndCookie(String url, String jsonInput, String cookieName, String role,
			String testCaseName, boolean bothAccessAndIdToken) {
		Response response = null;
		jsonInput = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		HashMap<String, String> map = null;
		try {
			map = new Gson().fromJson(jsonInput, new TypeToken<HashMap<String, String>>() {
			}.getType());
		} catch (Exception e) {
			logger.error("Not able to convert jsonrequet to map: " + jsonInput + " Exception: " + e.getMessage());
		}

		if (bothAccessAndIdToken) {
			token = kernelAuthLib.getTokenByRole(role, ACCESSTOKENCOOKIENAME);
			idToken = kernelAuthLib.getTokenByRole(role, IDTOKENCOOKIENAME);
		} else {
			token = kernelAuthLib.getTokenByRole(role);
		}
		logger.info("******get request to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(jsonInput) + "</pre>");
		try {
			if (bothAccessAndIdToken) {
				response = RestClient.postRequestWithCookieAndOnlyPathParm(url, map, MediaType.APPLICATION_JSON,
						MediaType.APPLICATION_JSON, cookieName, token, IDTOKENCOOKIENAME, idToken);
			} else {
				response = RestClient.postRequestWithCookieAndOnlyPathParm(url, map, MediaType.APPLICATION_JSON,
						MediaType.APPLICATION_JSON, cookieName, token);
			}

			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	protected Response postWithOnlyQueryParamAndCookie(String url, String jsonInput, String cookieName, String role,
			String testCaseName) {
		Response response = null;
		jsonInput = inputJsonKeyWordHandeler(jsonInput, testCaseName);
		HashMap<String, String> map = null;
		try {
			map = new Gson().fromJson(jsonInput, new TypeToken<HashMap<String, String>>() {
			}.getType());
		} catch (Exception e) {
			logger.error("Not able to convert jsonrequet to map: " + jsonInput + " Exception: " + e.getMessage());
		}

		token = kernelAuthLib.getTokenByRole(role);
		logger.info("******get request to EndPointUrl: " + url + " *******");
		Reporter.log("<pre>" + ReportUtil.getTextAreaJsonMsgHtml(jsonInput) + "</pre>");
		try {
			response = RestClient.postRequestWithQueryParm(url, map, "*/*", "*/*", cookieName, token);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");
			return response;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return response;
		}
	}

	private static File updateCSV(String fileToUpdate, String replace, int row, int col) {
		File inputFile = new File(fileToUpdate);
		List<String[]> csvBody;
		
		try(CSVReader csvReader = new CSVReader(new FileReader(inputFile), ',');
			     CSVWriter csvWriter = new CSVWriter(new FileWriter(inputFile), ',')) {
			csvBody = csvReader.readAll();
			csvBody.get(row)[col] = replace;
			csvWriter.writeAll(csvBody);
		} catch (IOException e) {
			logger.error(e.getStackTrace());
		}
		return inputFile;
	}

	public static Properties getproperty(String path) {
		Properties prop = new Properties();
		FileInputStream inputStream = null;
		try {
			File file = new File(path);
			inputStream = new FileInputStream(file);
			prop.load(inputStream);
		} catch (IOException e) {
			logger.error("Exception " + e.getMessage());
		}finally {
			closeInputStream(inputStream);
		}
		return prop;
	}

	public String generateSignatureWithRequest(String Request, String payload, String partnerId) {
		String singResponse = null;
		// call sing()
		try {
			singResponse = sign(Request, false, true, false, null, getKeysDirPath(), partnerId);
		} catch (NoSuchAlgorithmException | UnrecoverableEntryException | KeyStoreException | CertificateException
				| OperatorCreationException | JoseException | IOException e) {
			logger.error(e.getStackTrace());
		}
		return singResponse;

		/*
		 * String signUrl = ApplnURI+props.getProperty("internalSignEndpoint"); String
		 * token = kernelAuthLib.getTokenByRole("regproc"); String encodedrequest =
		 * Base64.getEncoder().encodeToString(Request.getBytes()); String signJsonPath =
		 * MosipTestRunner.getGlobalResourcePath() +
		 * "/"+props.getProperty("signJsonPath"); String reqJsonString =
		 * FileUtil.readInput(signJsonPath); if(payload != null) reqJsonString =
		 * JsonPrecondtion.parseAndReturnJsonContent(reqJsonString, payload,
		 * "request.includePayload"); reqJsonString = reqJsonString.replace("$DATA$",
		 * encodedrequest); Response response=RestClient.postRequestWithCookie(signUrl,
		 * reqJsonString, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON,
		 * COOKIENAME, token); JSONObject res = new JSONObject(response.asString());
		 * JSONObject responseJson = new JSONObject(res.get("response").toString());
		 * if(responseJson.has("jwtSignedData")) return
		 * responseJson.get("jwtSignedData").toString(); else
		 * logger.error("No able to get the Signature from: "+signUrl+" with request: "
		 * +reqJsonString); return "Not able to Get Signature";
		 */

	}

	/**
	 * The method will modify json request with the given field values in map
	 * 
	 * @param listOfFiles
	 * @param fieldvalue
	 * @param propFileName
	 * @param keywordinFile
	 * @return true or false
	 */
	protected String modifyRequest(String inputJson, Map<String, String> fieldvalue, String propFileNameWithPath) {
		try {
			MessagePrecondtion jsonPrecon = new JsonPrecondtion();
			return jsonPrecon.parseAndUpdateJson(inputJson, fieldvalue, propFileNameWithPath);

		} catch (Exception e) {
			logger.error("Exception occured:" + e.getMessage());
			return inputJson;
		}
	}

	public static void copyPreregTestResource() {
		copymoduleSpecificAndConfigFile("preReg");
	}

	public static void copyPrerequisiteTestResource() {
		copymoduleSpecificAndConfigFile("prerequisite");
	}

	public static void copyIdrepoTestResource() {
		copymoduleSpecificAndConfigFile("idRepository");
	}

	public static void copyResidentTestResource() {
		copymoduleSpecificAndConfigFile("resident");
	}

	public static void copyPartnerTestResource() {
		copymoduleSpecificAndConfigFile("partner");
	}

	/*
	 * public static ArrayList<JSONObject> getTestCase(TestCaseDTO testCaseDTO) {
	 * String[] templateFields = testCaseDTO.getTemplateFields(); String input =
	 * testCaseDTO.getInput(); String output = testCaseDTO.getOutput(); JSONObject
	 * json = new JSONObject(input); JSONObject jsonop = new JSONObject(output);
	 * 
	 * // get all template fields for which translation is required
	 * ArrayList<JSONObject> listofjsonObject = new ArrayList<>(); ArrayList<String>
	 * list = new ArrayList<>(); Arrays.stream(templateFields).forEach(field ->
	 * list.add(field)); // iterate on all required languages
	 * 
	 * for (String language : BaseTestCase.languageList) { JSONObject langjson = new
	 * JSONObject(input); for (String fieldToConvert : list) { String valueToConvert
	 * = json.getString(fieldToConvert); String translatedValue = valueToConvert;
	 * langjson.remove(fieldToConvert); if (!language.equalsIgnoreCase("eng")) {
	 * translatedValue = Translator.translate(language, valueToConvert); }
	 * logger.info("valueToConvert" + valueToConvert + "-----" +
	 * translatedValue); langjson.put(fieldToConvert, translatedValue); }
	 * langjson.remove("langCode"); langjson.put("langCode", language);
	 * logger.info(langjson.toString()); listofjsonObject.add(langjson); }
	 * 
	 * return listofjsonObject; }
	 */

	public static ArrayList<JSONObject> getInputTestCase(TestCaseDTO testCaseDTO) {
		String[] templateFields = testCaseDTO.getTemplateFields();
		String input = testCaseDTO.getInput();
		ArrayList<JSONObject> listofjsonObject = new ArrayList<>();
		listofjsonObject = inputJsonConversion(input, templateFields);
		// listofjsonObject = outputJsonConversion(output, templateFields);
		return listofjsonObject;
	}

	public static ArrayList<JSONObject> getOutputTestCase(TestCaseDTO testCaseDTO) {
		String[] templateFields = testCaseDTO.getTemplateFields();
		String output = testCaseDTO.getOutput();
		ArrayList<JSONObject> listofjsonObject = new ArrayList<>();
		listofjsonObject = outputJsonConversion(output, templateFields);
		return listofjsonObject;
	}

	public static ArrayList<JSONObject> inputJsonConversion(String input, String[] templateFields) {
		JSONObject inputJson = new JSONObject(input);
		return convertJson(templateFields, input, inputJson);
	}

	public static ArrayList<JSONObject> outputJsonConversion(String output, String[] templateFields) {
		JSONObject outputJson = new JSONObject(output);
		return convertJson(templateFields, output, outputJson);
	}

	private static ArrayList<JSONObject> convertJson(String[] templateFields, String template, JSONObject jsonObject) {
		// get all template fields for which translation is required

		ArrayList<JSONObject> listofjsonObject = new ArrayList<>();
		ArrayList<String> list = new ArrayList<>();
		Arrays.stream(templateFields).forEach(field -> list.add(field));
		// iterate on all required languages
		for (String language : BaseTestCase.languageList) {
			JSONObject langjson = new JSONObject(template);
			for (String fieldToConvert : list) {
				Boolean isFilterRequired = false;
				String valueToConvert = null;
				String translatedValue = null;
				if (jsonObject.has(fieldToConvert)) {
					valueToConvert = jsonObject.getString(fieldToConvert);
					translatedValue = valueToConvert;
				} else if (jsonObject.has("filters") && jsonObject.getJSONArray("filters").length() >= 1) {
					String filterValueToConvert = jsonObject.getJSONArray("filters").get(0).toString();
					JSONObject filtervalue = new JSONObject(filterValueToConvert);
					if (filtervalue.has(fieldToConvert)) {
						valueToConvert = filtervalue.getString(fieldToConvert);
						translatedValue = valueToConvert;
						isFilterRequired = true;
					}
				}

				// langjson.remove(fieldToConvert);
				if (!language.equalsIgnoreCase("eng") && valueToConvert != null) {
					translatedValue = Translator.translate(language, valueToConvert);
				}
				if (isFilterRequired) {
					String filterValueToConvert = jsonObject.getJSONArray("filters").get(0).toString();
					JSONObject filtervalue = new JSONObject(filterValueToConvert);
					String filtervalue1 = filtervalue.toString().replace(valueToConvert, translatedValue);
					JSONObject filteredvalue = new JSONObject(filtervalue1);
					JSONArray filtertransvalue = new JSONArray();
					filtertransvalue.put(filteredvalue);
					// JSONArray a = abc.toJSONArray(new JSONArray(filtervalue1));
					// JSONArray a = new JSONArray(filtervalue1);
					langjson.remove("filters");
					langjson.put("filters", filtertransvalue);

				}
				// logger.info("valueToConvert" + valueToConvert + "-----" +
				// translatedValue);
				// put that translated value if and only if that field is present in
				// template(input/output)
				else if (!isFilterRequired && !langjson.isNull(fieldToConvert) || translatedValue != null)
					langjson.put(fieldToConvert, translatedValue);
			}

			/*
			 * if(langjson.has("data")) { JSONObject rmLanCode = new
			 * JSONObject(langjson.getJSONArray("data").get(0).toString());
			 * rmLanCode.remove("langCode"); rmLanCode.put("langCode", language);
			 * langjson.put("data", rmLanCode); }
			 */
			if (langjson.has("langCode")) {
				langjson.remove("langCode");
				langjson.put("langCode", language);
			} else if (langjson.has("langcode")) {
				langjson.remove("langcode");
				langjson.put("langcode", language);
			} else {
				langjson.remove("languageCode");
				langjson.put("languageCode", language);
			}

			logger.info(langjson.toString());
			listofjsonObject.add(langjson);
		}
		return listofjsonObject;
	}

	public String sign(String dataToSign, boolean includePayload, boolean includeCertificate, boolean includeCertHash,
			String certificateUrl, String dirPath, String partnerId)
			throws JoseException, NoSuchAlgorithmException, UnrecoverableEntryException, KeyStoreException,
			CertificateException, IOException, OperatorCreationException {
		KeyMgrUtil keyMgrUtil = new KeyMgrUtil();
		JsonWebSignature jwSign = new JsonWebSignature();
		PrivateKeyEntry keyEntry = keyMgrUtil.getKeyEntry(dirPath, partnerId);
		if (Objects.isNull(keyEntry)) {
			throw new KeyStoreException("Key file not available for partner type: " + partnerId);
		}

		PrivateKey privateKey = keyEntry.getPrivateKey();

		X509Certificate x509Certificate = keyMgrUtil.getCertificateEntry(dirPath, partnerId);

		if (x509Certificate == null) {
			x509Certificate = (X509Certificate) keyEntry.getCertificate();
		}

		if (includeCertificate)
			jwSign.setCertificateChainHeaderValue(new X509Certificate[] { x509Certificate });

		if (includeCertHash)
			jwSign.setX509CertSha256ThumbprintHeaderValue(x509Certificate);

		if (Objects.nonNull(certificateUrl))
			jwSign.setHeader("x5u", certificateUrl);

		jwSign.setPayload(dataToSign);
		jwSign.setAlgorithmHeaderValue(SIGN_ALGO);
		jwSign.setKey(privateKey);
		jwSign.setDoKeyValidation(false);
		if (includePayload)
			return jwSign.getCompactSerialization();

		return jwSign.getDetachedContentCompactSerialization();

	}

	/*
	 * public String getKeysDirPath() { // String path =
	 * props.getProperty("getCertificatePath"); environment =
	 * System.getProperty("env.user"); String path = "C:/Users/" +
	 * System.getProperty("user.name") + "/.m2" + "/IDA-" + environment +
	 * ".mosip.net"; path = path.replace("////", "\\"); return new
	 * File(path).getAbsolutePath(); }
	 */

	public String getKeysDirPath() {
		// String path = props.getProperty("getCertificatePath");
		// String path =
		// System.getProperty("java.io.tmpdir")+props.getProperty("getCertificateFileName");
		// String path = System.getProperty("java.io.tmpdir")+ File.pathSeparator +
		// "IDA-" + environment + ".mosip.net";
		String path = System.getProperty("java.io.tmpdir") + "/" + "IDA-" + environment + ".mosip.net";
		logger.info("certificate path is::" + path);
		return new File(path).getAbsolutePath();
	}

	public static String buildIdentityRequest(String identityRequest) {
		if (identityRequest.contains("$DATETIME$"))
			identityRequest = identityRequest.replace("$DATETIME$", generateCurrentUTCTimeStamp());
		if (identityRequest.contains("$TIMESTAMP$"))
			identityRequest = identityRequest.replace("$TIMESTAMP$", generateCurrentUTCTimeStamp());
		if (identityRequest.contains("$FACE$"))
			identityRequest = identityRequest.replace("$FACE$", propsBio.getProperty("FaceBioValue"));
		if (identityRequest.contains("$RIGHTIRIS$"))
			identityRequest = identityRequest.replace("$RIGHTIRIS$", propsBio.getProperty("RightIrisBioValue"));
		if (identityRequest.contains("$LEFTIRIS$"))
			identityRequest = identityRequest.replace("$LEFTIRIS$", propsBio.getProperty("LeftIrisBioValue"));
		if (identityRequest.contains("$RIGHTTHUMB$"))
			identityRequest = identityRequest.replace("$RIGHTTHUMB$", propsBio.getProperty("RightThumbBioValue"));
		if (identityRequest.contains("$LEFTTHUMB$"))
			identityRequest = identityRequest.replace("$LEFTTHUMB$", propsBio.getProperty("LeftThumbBioValue"));
		if (identityRequest.contains("$RIGHTLITTLEFINGER$"))
			identityRequest = identityRequest.replace("$RIGHTLITTLEFINGER$",
					propsBio.getProperty("RightLittleFingerBioValue"));
		if (identityRequest.contains("$RIGHTMIDDLEFINGER$"))
			identityRequest = identityRequest.replace("$RIGHTMIDDLEFINGER$", propsBio.getProperty("RightMiddleFinger"));
		if (identityRequest.contains("$RIGHTRINGFINGER$"))
			identityRequest = identityRequest.replace("$RIGHTRINGFINGER$",
					propsBio.getProperty("RightRingFingerBioValue"));
		if (identityRequest.contains("$RIGHTINDEXFINGER$"))
			identityRequest = identityRequest.replace("$RIGHTINDEXFINGER$",
					propsBio.getProperty("RightIndexFingerBioValue"));
		if (identityRequest.contains("$LEFTLITTLEFINGER$"))
			identityRequest = identityRequest.replace("$LEFTLITTLEFINGER$",
					propsBio.getProperty("LeftLittleFingerBioValue"));
		if (identityRequest.contains("$LEFTINDEXFINGER$"))
			identityRequest = identityRequest.replace("$LEFTINDEXFINGER$",
					propsBio.getProperty("LeftIndexFingerBioValue"));
		if (identityRequest.contains("$LEFTMIDDLEFINGER$"))
			identityRequest = identityRequest.replace("$LEFTMIDDLEFINGER$",
					propsBio.getProperty("LeftMiddleFingerBioValue"));
		if (identityRequest.contains("$LEFTRINGFINGER$"))
			identityRequest = identityRequest.replace("$LEFTRINGFINGER$",
					propsBio.getProperty("LeftRingFingerBioValue"));
		return identityRequest;
	}

	public static TestCaseDTO filterHbs(TestCaseDTO testCaseDTO) {
		if (BaseTestCase.languageList.size() == 2) {
			if (Boolean.parseBoolean(props.getProperty("V3ENV")) == true) {
				if (testCaseDTO.getInputTemplate().contains("$LANGNUMBER$"))
					testCaseDTO.setInputTemplate(testCaseDTO.getInputTemplate().replace("$LANGNUMBER$", "DOUBLE_V3"));
				if (testCaseDTO.getOutputTemplate().contains("$LANGNUMBER$"))
					testCaseDTO.setOutputTemplate(testCaseDTO.getOutputTemplate().replace("$LANGNUMBER$", "DOUBLE_V3"));
			} else {
				if (testCaseDTO.getInputTemplate().contains("$LANGNUMBER$"))
					testCaseDTO.setInputTemplate(testCaseDTO.getInputTemplate().replace("$LANGNUMBER$", "DOUBLE"));
				if (testCaseDTO.getOutputTemplate().contains("$LANGNUMBER$"))
					testCaseDTO.setOutputTemplate(testCaseDTO.getOutputTemplate().replace("$LANGNUMBER$", "DOUBLE"));
			}

		}

		else if (BaseTestCase.languageList.size() == 3) {
			if (testCaseDTO.getInputTemplate().contains("$LANGNUMBER$"))
				testCaseDTO.setInputTemplate(testCaseDTO.getInputTemplate().replace("$LANGNUMBER$", "TRIPLE"));
			if (testCaseDTO.getOutputTemplate().contains("$LANGNUMBER$"))
				testCaseDTO.setOutputTemplate(testCaseDTO.getOutputTemplate().replace("$LANGNUMBER$", "TRIPLE"));
		}

		else if (BaseTestCase.languageList.size() == 1) {
			if (testCaseDTO.getInputTemplate().contains("$LANGNUMBER$"))
				testCaseDTO.setInputTemplate(testCaseDTO.getInputTemplate().replace("$LANGNUMBER$", "SINGLE"));
			if (testCaseDTO.getOutputTemplate().contains("$LANGNUMBER$"))
				testCaseDTO.setOutputTemplate(testCaseDTO.getOutputTemplate().replace("$LANGNUMBER$", "SINGLE"));
		}

		else {
			if (testCaseDTO.getInputTemplate().contains("$LANGNUMBER$"))
				testCaseDTO.setInputTemplate(testCaseDTO.getInputTemplate().replace("$LANGNUMBER$", "DEFAULT"));
			if (testCaseDTO.getOutputTemplate().contains("$LANGNUMBER$"))
				testCaseDTO.setOutputTemplate(testCaseDTO.getOutputTemplate().replace("$LANGNUMBER$", "DEFAULT"));
		}
		return testCaseDTO;
	}

	public static List<String> getAppointmentDetails(Response fetchCenterResponse) {
		int countCenterDetails = 0;
		List<String> appointmentDetails = new ArrayList<>();
		try {
			countCenterDetails = fetchCenterResponse.jsonPath().getList("response.centerDetails").size();
		} catch (NullPointerException e) {
			Assert.assertTrue(false, "Failed to fetch registration details while booking appointment");
		}
		for (int i = 0; i < countCenterDetails; i++) {
			try {
				fetchCenterResponse.jsonPath().get("response.centerDetails[" + i + "].timeSlots[0].fromTime")
						.toString();
			} catch (NullPointerException e) {
				continue;
			}

			try {
				appointmentDetails.add(fetchCenterResponse.jsonPath().get("response.regCenterId").toString());
				appointmentDetails
						.add(fetchCenterResponse.jsonPath().get("response.centerDetails[" + i + "].date").toString());
				appointmentDetails.add(fetchCenterResponse.jsonPath()
						.get("response.centerDetails[" + i + "].timeSlots[0].fromTime").toString());
				appointmentDetails.add(fetchCenterResponse.jsonPath()
						.get("response.centerDetails[" + i + "].timeSlots[0].toTime").toString());
			} catch (NullPointerException e) {
				Assert.assertTrue(false, "Failed to fetch registration details while booking appointment");
			}
			break;
		}
		return appointmentDetails;
	}

	public static String modifyIdSchemaInputJson(String inputJson) {
		inputJson = inputJson.replace("&quot;", "\\" + "\"");
		inputJson = inputJson.replace("/", "\\" + "/");
		inputJson = inputJson.replace("\\\\", "\\\\\\\\");
		return inputJson;
	}

	public static String generateTokenID(String uin, String partnerCode) {
		try {
			String uinHash = HMACUtils2
					.digestAsPlainText((uin + props.getProperty("mosip.kernel.tokenid.uin.salt")).getBytes());
			String hash = HMACUtils2.digestAsPlainText((props.getProperty("mosip.kernel.tokenid.partnercode.salt")
					+ props.getProperty("partner_Token_Id") + uinHash).getBytes());
			return new BigInteger(hash.getBytes()).toString().substring(0, 36);
		} catch (NoSuchAlgorithmException e) {
			// TODO to be removed
			logger.error("Exception " + e);
			return partnerCode;
		}
	}

	public static String modifySchemaGenerateHbs() {
		return modifySchemaGenerateHbs(false);
	}

	public static String modifySchemaGenerateHbs(boolean regenerateHbs) {
		String ja3 = "";
		if (identityHbs != null && regenerateHbs == false) {
			return identityHbs;
		}
		StringBuffer everything = new StringBuffer("");
		kernelAuthLib = new KernelAuthentication();
		String token = kernelAuthLib.getTokenByRole("admin");
		String url = ApplnURI + props.getProperty("masterSchemaURL");

		Response response = RestClient.getRequestWithCookie(url, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON,
				"Authorization", token);

		org.json.JSONObject responseJson = new org.json.JSONObject(response.asString());
		org.json.JSONObject schemaData = (org.json.JSONObject) responseJson.get("response");

		// String schemaVersion = schemaData.getString("idVersion");
		Double schemaVersion = (Double) schemaData.get("idVersion");
		// double schemaVersion=Double.parseDouble(schemaVersion);
		logger.info(schemaVersion);
		String schemaJsonData = schemaData.getString("schemaJson");

		String schemaFile = schemaJsonData.toString();
		FileWriter fileWriter1 = null;
		FileWriter fileWriter2 = null;
		FileWriter fileWriter3 = null;
		FileReader fileReader = null;
		BufferedReader bufferedReader = null;

		try {
			JSONObject jObj = new JSONObject(schemaFile);
			JSONObject objIDJson4 = jObj.getJSONObject("properties");
			JSONObject objIDJson = objIDJson4.getJSONObject("identity");
			JSONObject objIDJson2 = objIDJson.getJSONObject("properties");
			JSONArray objIDJson1 = objIDJson.getJSONArray("required");

			fileWriter1 = new FileWriter("addIdentity.hbs");
			fileWriter1.write("{\n");
			fileWriter1.write("  \"id\": \"{{id}}\",\n");
			fileWriter1.write("  \"request\": {\n");
			fileWriter1.write("\t  \"registrationId\": \"{{registrationId}}\",\n");

			fileWriter1.write("    \"identity\": {\n");
			fileWriter1.write("\t  \"UIN\": \"{{UIN}}\",\n");
			fileWriter1.close();

			boolean flag = true;
			for (int i = 0, size = objIDJson1.length(); i < size; i++) {
				String objIDJson3 = objIDJson1.getString(i); // fullName

				JSONObject rc1 = (JSONObject) objIDJson2.get(objIDJson3);

				if (rc1.has("$ref") && rc1.get("$ref").toString().contains("simpleType")) {

					JSONArray jArray = new JSONArray();

					ja3 = "{\n\t\t  \"language\":";
					for (int j = 0; j < BaseTestCase.getLanguageList().size(); j++) {

						{
							JSONObject studentJSON = new JSONObject();
							studentJSON.put("language", BaseTestCase.getLanguageList().get(j));
							if (objIDJson3.contains("fullName") && regenerateHbs == true) {
								studentJSON.put("value", propsMap.getProperty(objIDJson3 + "1")); // fullName1
							} else {
								studentJSON.put("value",
										propsMap.getProperty(objIDJson3) + BaseTestCase.getLanguageList().get(j));
							}
							jArray.put(studentJSON);
						}

					}

					JSONObject mainObj = new JSONObject();
					mainObj.put("fullName", jArray);

					logger.info(mainObj);

					fileWriter2 = new FileWriter("addIdentity.hbs", flag);
					flag = true;
					fileWriter2.write("\t  \"" + objIDJson3 + "\": \n\t   ");

					fileWriter2.write(jArray.toString());
					fileWriter2.write("\n\t,\n");
					fileWriter2.close();

				} else {

					fileWriter2 = new FileWriter("addIdentity.hbs", flag);
					flag = true;

					if (objIDJson3.equals("proofOfIdentity")) {
						fileWriter2.write("\t  \"proofOfIdentity\": {\n" + "\t\t\"format\": \"txt\",\n"
								+ "\t\t\"type\": \"DOC001\",\n" + "\t\t\"value\": \"fileReferenceID\"\n" + "\t  },\n");
					}

					else if (objIDJson3.equals("individualBiometrics")) {
						fileWriter2.write("\t  \"individualBiometrics\": {\n" + "\t\t\"format\": \"cbeff\",\n"
								+ "\t\t\"version\": 1,\n" + "\t\t\"value\": \"fileReferenceID\"\n" + "\t  }\n");
					}

					else if (objIDJson3.equals("IDSchemaVersion")) {
						fileWriter2.write("\t  \"" + objIDJson3 + "\":" + " " + "" + "" + schemaVersion + "" + ",\n");
					}

					else {
						fileWriter2
								.write("\t  \"" + objIDJson3 + "\":" + " " + "\"" + "{{" + objIDJson3 + "}}\"" + ",\n");

					}
					fileWriter2.close();

				}

			}
			fileWriter3 = new FileWriter("addIdentity.hbs", true);

			fileWriter3.write("\t},\n");
			fileWriter3.write("\t\"documents\": [\n" + "\t  {\n" + "\t\t\"value\": \"{{value}}\",\n"
					+ "\t\t\"category\": \"{{category}}\"\n" + "\t  }\n" + "\t]\n");
			fileWriter3.write("},\n");

			fileWriter3.write("\t\"requesttime\": \"{{requesttime}}\",\n");
			fileWriter3.write("\t\"version\": \"{{version}}\"\n");
			fileWriter3.write("}\n");
			fileWriter3.close();

			fileReader = new FileReader("addIdentity.hbs");
			bufferedReader = new BufferedReader(fileReader);
			try {
				StringBuilder sb = new StringBuilder();
				String line = bufferedReader.readLine();

				while (line != null) {
					sb.append(line);
					sb.append(System.lineSeparator());
					line = bufferedReader.readLine();

					StringBuffer everythingtrue = new StringBuffer(sb.toString());
					everything = everythingtrue;
				}

			} finally {
				bufferedReader.close();
			}

		} catch (NullPointerException | IOException e) {
			logger.error(e.getStackTrace());
		} finally {
			closeFileWriter(fileWriter1);
			closeFileWriter(fileWriter2);
			closeFileWriter(fileWriter3);
			closeFileReader(fileReader);
			closeBufferedReader(bufferedReader);
		}
		identityHbs = everything.toString();
		return identityHbs;
	}

	public static String generateLatestSchemaVersion() {

		kernelAuthLib = new KernelAuthentication();
		String token = kernelAuthLib.getTokenByRole("admin");
		String url = ApplnURI + props.getProperty("masterSchemaURL");

		Response response = RestClient.getRequestWithCookie(url, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON,
				"Authorization", token);

		org.json.JSONObject responseJson = new org.json.JSONObject(response.asString());
		org.json.JSONObject schemaData = (org.json.JSONObject) responseJson.get("response");

		// String schemaVersion = schemaData.getString("idVersion");
		Double schemaVersion = (Double) schemaData.get("idVersion");
		String latestSchemaVersion = Double.toString(schemaVersion);
		// double schemaVersion=Double.parseDouble(schemaVersion);
		logger.info(latestSchemaVersion);
		return latestSchemaVersion;

	}

	public static String generateHbsForUpdateDraft() {
		if (draftHbs != null) {
			return draftHbs;
		}
		StringBuffer everything = new StringBuffer("");
		kernelAuthLib = new KernelAuthentication();
		String token = kernelAuthLib.getTokenByRole("admin");
		String url = ApplnURI + props.getProperty("masterSchemaURL");

		Response response = RestClient.getRequestWithCookie(url, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON,
				"Authorization", token);

		org.json.JSONObject responseJson = new org.json.JSONObject(response.asString());
		org.json.JSONObject schemaData = (org.json.JSONObject) responseJson.get("response");

		// String schemaVersion = schemaData.getString("idVersion");
		Double schemaVersion = (Double) schemaData.get("idVersion");
		// double schemaVersion=Double.parseDouble(schemaVersion);
		logger.info(schemaVersion);
		String schemaJsonData = schemaData.getString("schemaJson");

		String schemaFile = schemaJsonData.toString();
		
		FileWriter fileWriter1 = null;
		FileWriter fileWriter2 = null;
		FileWriter fileWriter3 = null;
		FileReader fileReader = null;
		BufferedReader bufferedReader = null;

		try {
			JSONObject jObj = new JSONObject(schemaFile);
			JSONObject objIDJson4 = jObj.getJSONObject("properties");
			JSONObject objIDJson = objIDJson4.getJSONObject("identity");
			JSONObject objIDJson2 = objIDJson.getJSONObject("properties");
			JSONArray objIDJson1 = objIDJson.getJSONArray("required");

			fileWriter1 = new FileWriter("updateDraft.hbs");
			fileWriter1.write("{\n");
			fileWriter1.write("  \"id\": \"{{id}}\",\n");
			fileWriter1.write("  \"requesttime\": \"{{requesttime}}\",\n");
			fileWriter1.write("  \"version\": \"{{version}}\",\n");
			fileWriter1.write("  \"registrationId\": \"{{registrationId}}\",\n");
			fileWriter1.write("  \"request\": {\n");

			fileWriter1.write("    \"identity\": {\n");
			fileWriter1.close();

			boolean flag = true;
			for (int i = 0, size = objIDJson1.length(); i < size; i++) {
				String objIDJson3 = objIDJson1.getString(i);

				JSONObject rc1 = (JSONObject) objIDJson2.get(objIDJson3);

				if (rc1.has("$ref") && rc1.get("$ref").toString().contains("simpleType")) {

					JSONArray jArray = new JSONArray();
					for (int j = 0; j < BaseTestCase.getLanguageList().size(); j++) {

						{
							JSONObject studentJSON = new JSONObject();
							studentJSON.put("language", BaseTestCase.getLanguageList().get(j));
							studentJSON.put("value", propsMap.getProperty(objIDJson3));
							jArray.put(studentJSON);
						}
					}

					JSONObject mainObj = new JSONObject();
					mainObj.put("fullName", jArray);

					logger.info(mainObj);

					fileWriter2 = new FileWriter("updateDraft.hbs", flag);
					flag = true;
					fileWriter2.write("\t  \"" + objIDJson3 + "\": \n\t   ");

					/*
					 * for (String list : languageDetails) { myWriter.write(list); }
					 */

					fileWriter2.write(jArray.toString());
					fileWriter2.write("\n\t  ,\n");
					fileWriter2.close();

				} else {

					fileWriter2 = new FileWriter("updateDraft.hbs", flag);
					flag = true;

					if (objIDJson3.equals("proofOfIdentity")) {
						fileWriter2.write("\t  \"proofOfIdentity\": {\n" + "\t\t\"format\": \"txt\",\n"
								+ "\t\t\"type\": \"DOC001\",\n" + "\t\t\"value\": \"fileReferenceID\"\n" + "\t  },\n");
					}

					else if (objIDJson3.equals("individualBiometrics")) {
						fileWriter2.write("\t  \"individualBiometrics\": {\n" + "\t\t\"format\": \"cbeff\",\n"
								+ "\t\t\"version\": 1,\n" + "\t\t\"value\": \"fileReferenceID\"\n" + "\t  }\n");
					}

					else if (objIDJson3.equals("IDSchemaVersion")) {
						fileWriter2.write("\t  \"" + objIDJson3 + "\":" + " " + "" + "" + schemaVersion + "" + ",\n");
					}

					else {
						fileWriter2.write("\t  \"" + objIDJson3 + "\":" + " " + "\"" + "{{" + objIDJson3 + "}}\"" + ",\n");

					}
					fileWriter2.close();

				}

			}
			fileWriter3 = new FileWriter("updateDraft.hbs", true);

			fileWriter3.write("\t},\n");
			fileWriter3.write("\t\"documents\": [\n" + "\t  {\n" + "\t\t\"value\": \"{{value}}\",\n"
					+ "\t\t\"category\": \"{{category}}\"\n" + "\t  }\n" + "\t]\n");
			fileWriter3.write("},\n");

			fileWriter3.write("}\n");
			fileWriter3.close();

			fileReader = new FileReader("updateDraft.hbs");
			bufferedReader = new BufferedReader(fileReader);
			try {
				StringBuilder sb = new StringBuilder();
				String line = bufferedReader.readLine();

				while (line != null) {
					sb.append(line);
					sb.append(System.lineSeparator());
					line = bufferedReader.readLine();

					StringBuffer everythingtrue = new StringBuffer(sb.toString());
					everything = everythingtrue;

				}

			} finally {
				bufferedReader.close();
			}

		} catch (NullPointerException | IOException e) {
			logger.error(e.getStackTrace());
		} finally {
			closeFileWriter(fileWriter1);
			closeFileWriter(fileWriter2);
			closeFileWriter(fileWriter3);
			closeFileReader(fileReader);
			closeBufferedReader(bufferedReader);
		}
		draftHbs = everything.toString();
		return draftHbs;
	}

	public static String generateHbsForPrereg(boolean isItUpdate) {
		if (isItUpdate && preregHbsForUpdate != null) {
			return preregHbsForUpdate;
		}

		if (!isItUpdate && preregHbsForCreate != null) {
			return preregHbsForCreate;
		}
		StringBuffer everything = new StringBuffer("");
		kernelAuthLib = new KernelAuthentication();
		String token = kernelAuthLib.getTokenByRole("admin");
		String url = ApplnURI + props.getProperty("masterSchemaURL");

		Response response = RestClient.getRequestWithCookie(url, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON,
				"Authorization", token);

		org.json.JSONObject responseJson = new org.json.JSONObject(response.asString());
		org.json.JSONObject schemaData = (org.json.JSONObject) responseJson.get("response");

		// String schemaVersion = schemaData.getString("idVersion");
		Double schemaVersion = (Double) schemaData.get("idVersion");
		// double schemaVersion=Double.parseDouble(schemaVersion);
		logger.info(schemaVersion);
		String schemaJsonData = schemaData.getString("schemaJson");

		String schemaFile = schemaJsonData.toString();
		
		FileWriter fileWriter1 = null;
		FileWriter fileWriter2 = null;
		FileWriter fileWriter3 = null;
		FileReader fileReader = null;
		BufferedReader bufferedReader = null;

		try {
			JSONObject jObj = new JSONObject(schemaFile);
			JSONObject objIDJson4 = jObj.getJSONObject("properties");
			logger.info(objIDJson4);
			JSONObject objIDJson = objIDJson4.getJSONObject("identity");
			logger.info(objIDJson);
			JSONObject objIDJson2 = objIDJson.getJSONObject("properties");
			logger.info(objIDJson2);
			JSONArray objIDJson1 = objIDJson.getJSONArray("required");
			logger.info(objIDJson1);

			ArrayList<String> list = new ArrayList<String>();

			if (objIDJson1 != null) {
				int len = objIDJson1.length();
				for (int i = 0; i < len; i++) {
					list.add(objIDJson1.get(i).toString());
				}
			}
			list.add("residenceStatus");
			// Remove the element from arraylist
			if (list.contains("proofOfIdentity")) {
				list.remove("proofOfIdentity");
			}

			if (list.contains("individualBiometrics")) {
				list.remove("individualBiometrics");
			}

			// Recreate JSON Array
			JSONArray newIdJson = new JSONArray(list);

			fileWriter1 = new FileWriter("createPrereg.hbs");
			fileWriter1.write("{\n");
			fileWriter1.write("  \"id\": \"{{id}}\",\n");
			if (isItUpdate) {
				fileWriter1.write("  \"preRegistrationId\": \"{{preRegistrationId}}\",\n");
			}

			fileWriter1.write("  \"requesttime\": \"{{requesttime}}\",\n");
			fileWriter1.write("  \"version\": \"{{version}}\",\n");
			fileWriter1.write("  \"request\": {\n");
			fileWriter1.write("    \"langCode\": \"{{langCode}}\",\n");
			fileWriter1.write("    \"requiredFields\": " + newIdJson + ",\n");
			fileWriter1.write("    \"demographicDetails\": {\n");

			fileWriter1.write("      \"identity\": {\n");

			fileWriter1.close();

			boolean flag = true;
			for (int i = 0, size = newIdJson.length(); i < size; i++) {
				String objIDJson3 = newIdJson.getString(i);

				JSONObject rc1 = (JSONObject) objIDJson2.get(objIDJson3);

				// If the simple type is a language dependent
				if ((rc1.has("$ref") && rc1.get("$ref").toString().contains("simpleType"))
						|| objIDJson3.contains("residenceStatus")) {

					JSONArray jArray = new JSONArray();
					for (int j = 0; j < BaseTestCase.getLanguageList().size(); j++) {

						{
							JSONObject studentJSON = new JSONObject();
							studentJSON.put("language", BaseTestCase.getLanguageList().get(j));
							studentJSON.put("value", propsMap.getProperty(objIDJson3));
							jArray.put(studentJSON);
						}
					}

					JSONObject mainObj = new JSONObject();
					// mainObj.put("fullName", ja3);
					// mainObj.put("residenceStatus", ja3);

					logger.info(mainObj);

					fileWriter2 = new FileWriter("createPrereg.hbs", flag);
					flag = true;
					fileWriter2.write("\t  ,\"" + objIDJson3 + "\": ");

					fileWriter2.write(jArray.toString());
					// myWriter.write("\n\t ,\n");
					fileWriter2.write("\t");
					if (jArray.toString().contains("residenceStatus") || objIDJson3.contains("residenceStatus")) {
						fileWriter2.write("\n\t  \n}\n}\n}\n}\n");
					} else {
						fileWriter2.write("\n\t  \n");
					}

					fileWriter2.close();

				} else {

					fileWriter2 = new FileWriter("createPrereg.hbs", flag);
					flag = true;

					if (i == size - 1) {
						fileWriter2.write("\t  ,\"" + objIDJson3 + "\":" + " " + "\"" + "{{" + objIDJson3 + "}}\""
								+ "\n}\n}\n}\n}");

					}

					else if (objIDJson3.equals("IDSchemaVersion")) {
						fileWriter2.write("\t  \"" + objIDJson3 + "\":" + " " + "" + "" + schemaVersion + "" + "\n");
					}

					else {
						fileWriter2.write("\t  ,\"" + objIDJson3 + "\":" + " " + "\"" + "{{" + objIDJson3 + "}}\"" + "\n");

					}

					fileWriter2.close();

				}

			}
			fileWriter3 = new FileWriter("createPrereg.hbs", true);

			fileWriter3.close();
			
			fileReader = new FileReader("createPrereg.hbs");

			bufferedReader = new BufferedReader(fileReader);
			try {
				StringBuilder sb = new StringBuilder();
				String line = bufferedReader.readLine();

				while (line != null) {
					sb.append(line);
					sb.append(System.lineSeparator());
					line = bufferedReader.readLine();

					StringBuffer everythingtrue = new StringBuffer(sb.toString());
					everything = everythingtrue;

				}

			} finally {
				bufferedReader.close();
			}

		} catch (IOException | NullPointerException e) {
			logger.error(e.getStackTrace());
		} finally {
			closeFileWriter(fileWriter1);
			closeFileWriter(fileWriter2);
			closeFileWriter(fileWriter3);
			closeFileReader(fileReader);
			closeBufferedReader(bufferedReader);
		}
		if (isItUpdate) {

			preregHbsForUpdate = everything.toString();
			return preregHbsForUpdate;
		}
		preregHbsForCreate = everything.toString();
		return preregHbsForCreate;
	}

	@SuppressWarnings("unchecked")
	public static void createAndPublishPolicy() {

		String token = kernelAuthLib.getTokenByRole("partner");

		String url2 = ApplnURI + props.getProperty("policyGroupUrl");
		org.json.simple.JSONObject actualrequest = getRequestJson(policyGroupRequest);

		org.json.simple.JSONObject modifiedReq = new org.json.simple.JSONObject();
		modifiedReq.put("desc", "desc mosip auth policy group");
		modifiedReq.put("name", policyGroup);

		actualrequest.put("request", modifiedReq);

		Response response2 = RestClient.postRequestWithCookie(url2, actualrequest, MediaType.APPLICATION_JSON,
				MediaType.APPLICATION_JSON, "Authorization", token);
		String responseBody2 = response2.getBody().asString();
		String policygroupId = new org.json.JSONObject(responseBody2).getJSONObject("response").getString("id");
//		logger.info(policygroupId);
//		logger.info(responseBody2);

		String url = ApplnURI + props.getProperty("authPolicyUrl");
		org.json.simple.JSONObject actualrequestBody = getRequestJson(AuthPolicyBody);
		org.json.simple.JSONObject actualrequest2 = getRequestJson(AuthPolicyRequest);
		org.json.simple.JSONObject actualrequestAttr = getRequestJson(AuthPolicyRequestAttr);

		actualrequest2.put("name", policyName);
		actualrequest2.put("policyGroupName", policyGroup);
		actualrequest2.put("policies", actualrequestAttr);
		actualrequestBody.put("request", actualrequest2);

		Response response = RestClient.postRequestWithCookie(url, actualrequestBody, MediaType.APPLICATION_JSON,
				MediaType.APPLICATION_JSON, "Authorization", token);
		String responseBody = response.getBody().asString();
		String policyId = new org.json.JSONObject(responseBody).getJSONObject("response").getString("id");
//		logger.info(policyId);
//		logger.info(responseBody);

		String url3 = ApplnURI + props.getProperty("publishPolicyurl");

		if (url3.contains("POLICYID")) {
			url3 = url3.replace("POLICYID", policyId);
			url3 = url3.replace("POLICYGROUPID", policygroupId);

		}

		Response response3 = RestClient.postRequestWithCookie(url3, MediaType.APPLICATION_JSON,
				MediaType.APPLICATION_JSON, "Authorization", token);

		// Response response3 = RestClient.postRequestWithCookie(url3, actualrequest3,
		// MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, "Authorization",
		// token);
		String responseBody3 = response3.getBody().asString();
//		logger.info(responseBody3);

	}

	public static String getJWKKey(File fileName) {
		String keyString = null;
		try {
			if (fileName.exists()) {
				keyString = FileUtils.readFileToString(fileName, StandardCharset.UTF_8);
//				oidcJWKKey = RSAKey.parse(oidcJWKKeyString);
			}
			return keyString;
		} catch (IOException e1) {
			logger.error("Exception while getting oidcJWKKey for client assertion: " + e1.getMessage());
			return null;
		}
	}

	public static String signJWKKey(String clientId, RSAKey jwkKey) {
		String tempUrl = getValueFromActuator("resident-default.properties", "mosip.iam.token_endpoint");
		int idTokenExpirySecs = Integer.parseInt(getValueFromEsignetActuator("esignet-default.properties", "mosip.esignet.id-token-expire-seconds"));
		int accessTokenExpirySecs = Integer.parseInt(getValueFromEsignetActuator("esignet-default.properties", "mosip.esignet.access-token-expire-seconds"));
		// Create RSA-signer with the private key
		JWSSigner signer;

		try {
			signer = new RSASSASigner(jwkKey);

			// Prepare JWT with claims set
			JWTClaimsSet claimsSet = new JWTClaimsSet.Builder().subject(clientId)//
					.audience(tempUrl)//
					.issuer(clientId)//
					.issueTime(new Date()).expirationTime(new Date(new Date().getTime() + idTokenExpirySecs)).build();

			SignedJWT signedJWT = new SignedJWT(
					new JWSHeader.Builder(JWSAlgorithm.RS256).keyID(jwkKey.getKeyID()).build(), claimsSet);

			// Compute the RSA signature
			signedJWT.sign(signer);
			clientAssertionToken = signedJWT.serialize();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			logger.error("Exception while signing oidcJWKKey for client assertion: " + e.getMessage());
		}
		return clientAssertionToken;
	}

	public static String getWlaToken(String individualId, RSAKey jwkKey, String certData) throws Exception {
		String tempUrl = propsKernel.getProperty("validateBindingEndpoint");
		int idTokenExpirySecs = Integer.parseInt(getValueFromEsignetActuator("esignet-default.properties", "mosip.esignet.id-token-expire-seconds"));
		int accessTokenExpirySecs = Integer.parseInt(getValueFromEsignetActuator("esignet-default.properties", "mosip.esignet.access-token-expire-seconds"));
		Instant instant = Instant.now();
		long epochValue = instant.getEpochSecond();

		JSONObject payload = new JSONObject();
		payload.put("iss", "postman-inji");
		payload.put("aud", tempUrl);
		payload.put("sub", individualId);
		payload.put("iat", epochValue);
		payload.put("exp", epochValue + idTokenExpirySecs);

		X509Certificate certificate = (X509Certificate) convertToCertificate(certData);
		JsonWebSignature jwSign = new JsonWebSignature();
		if (certificate != null) {
			jwSign.setKeyIdHeaderValue(certificate.getSerialNumber().toString(10));
			jwSign.setX509CertSha256ThumbprintHeaderValue(certificate);
			jwSign.setPayload(payload.toString());
			jwSign.setAlgorithmHeaderValue("RS256");
			jwSign.setKey(jwkKey.toPrivateKey());
			jwSign.setDoKeyValidation(false);
			return jwSign.getCompactSerialization();
		}
		return "";
	}

	public static void writeFileAsString(File fileName, String content) {

		try {
			FileUtils.touch(fileName);// File got created
			FileUtils.writeStringToFile(fileName, content, StandardCharset.UTF_8.name());
		} catch (IOException e) {
			logger.error(e.getStackTrace());
		}
	}

	public static Certificate convertToCertificate(String certData) {
		try {
			StringReader strReader = new StringReader(certData);
			PemReader pemReader = new PemReader(strReader);
			PemObject pemObject = pemReader.readPemObject();
			if (Objects.isNull(pemObject)) {
//				LOGGER.error(KeymanagerConstant.SESSIONID, KeymanagerConstant.CERTIFICATE_PARSE, 
//								KeymanagerConstant.CERTIFICATE_PARSE, "Error Parsing Certificate.");
//				throw new KeymanagerServiceException(io.mosip.kernel.keymanagerservice.constant.KeymanagerErrorConstant.CERTIFICATE_PARSING_ERROR.getErrorCode(),
//								KeymanagerErrorConstant.CERTIFICATE_PARSING_ERROR.getErrorMessage());
				return null;
			}
			byte[] certBytes = pemObject.getContent();
			CertificateFactory certFactory = CertificateFactory.getInstance("X.509");
			return certFactory.generateCertificate(new ByteArrayInputStream(certBytes));
		} catch (IOException | CertificateException e) {
//			throw new KeymanagerServiceException(KeymanagerErrorConstant.CERTIFICATE_PARSING_ERROR.getErrorCode(),
//					KeymanagerErrorConstant.CERTIFICATE_PARSING_ERROR.getErrorMessage() + e.getMessage());
			return null;
		}
	}
	
	public static int getOtpExpTimeFromActuator() {
		Response response = null;
		int otpExpTime = 10; // 10secs
		org.json.JSONObject responseJson = null;
		JSONArray responseArray = null;
		String url = ApplnURI + propsKernel.getProperty("actuatorIDAEndpoint");
		try {
			response = RestClient.getRequest(url, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");

			responseJson = new org.json.JSONObject(response.getBody().asString());
			responseArray = responseJson.getJSONArray("propertySources");

			for (int i = 0, size = responseArray.length(); i < size; i++) {
				org.json.JSONObject eachJson = responseArray.getJSONObject(i);
				logger.info("eachJson is :" + eachJson.toString());
				if (eachJson.get("name").toString().contains(
						"configService:https://github.com/mosip/mosip-config/application-default.properties")) {
					
					
					org.json.JSONObject otpExpiryTime = (org.json.JSONObject) eachJson.getJSONObject("properties")
							.get("mosip.kernel.otp.expiry-time");
					String otpExpiryTimeVal = otpExpiryTime.getString("value");
					otpExpTime = Integer.parseInt(otpExpiryTimeVal);
					break;
				}
			}

			return otpExpTime;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return otpExpTime;
		}

	}

	public static String getValueFromActuator(String section, String key) {

		Response response = null;
		JSONObject responseJson = null;
		JSONArray responseArray = null;
		String url = ApplnURI + propsKernel.getProperty("actuatorEndpoint");
		String value = null;
		try {
			response = RestClient.getRequest(url, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");

			responseJson = new JSONObject(response.getBody().asString());
			responseArray = responseJson.getJSONArray("propertySources");

			for (int i = 0, size = responseArray.length(); i < size; i++) {
				JSONObject eachJson = responseArray.getJSONObject(i);
				if (eachJson.get("name").toString().contains(section)) {
					value = eachJson.getJSONObject("properties").getJSONObject(key)
							.get("value").toString();
					break;
				}
			}

			return value;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return value;
		}

	}
	
	public static String getValueFromEsignetActuator(String section, String key) {

		Response response = null;
		JSONObject responseJson = null;
		JSONArray responseArray = null;
		String url = ApplnURI.replace("api-internal", "esignet") + propsKernel.getProperty("actuatorEsignetEndpoint");
		String value = null;
		try {
			response = RestClient.getRequest(url, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");

			responseJson = new JSONObject(response.getBody().asString());
			responseArray = responseJson.getJSONArray("propertySources");

			for (int i = 0, size = responseArray.length(); i < size; i++) {
				JSONObject eachJson = responseArray.getJSONObject(i);
				if (eachJson.get("name").toString().contains(section)) {
					value = eachJson.getJSONObject("properties").getJSONObject(key)
							.get("value").toString();
					break;
				}
			}

			return value;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return value;
		}

	}
	
	public static String getValueFromConfigActuator() {

		Response response = null;
		JSONObject responseJson = null;
		JSONArray responseArray = null;
		String url = ApplnURI + propsKernel.getProperty("actuatorEndpoint");
		String claims = null;
		try {
			response = RestClient.getRequest(url, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");

			responseJson = new JSONObject(response.getBody().asString());
			responseArray = responseJson.getJSONArray("propertySources");

			for (int i = 0, size = responseArray.length(); i < size; i++) {
				JSONObject eachJson = responseArray.getJSONObject(i);
				if (eachJson.get("name").toString().contains("resident-default.properties")) {
					String claimVal = eachJson.getJSONObject("properties").getJSONObject("mosip.iam.module.login_flow.claims").getString("value");
					JSONObject claimJson = new JSONObject(claimVal);
					claims = claimJson.getJSONObject("userinfo").toString();					
					break;
				}
			}

			return claims;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return claims;
		}

	}
	
	public static String getRegprocWaitFromActuator() {

		Response response = null;
		JSONObject responseJson = null;
		JSONArray responseArray = null;
		String url = ApplnURI + propsKernel.getProperty("actuatorRegprocEndpoint");
		String waitInterval= null;
		try {
			response = RestClient.getRequest(url, MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON);
			Reporter.log("<b><u>Actual Response Content: </u></b>(EndPointUrl: " + url + ") <pre>"
					+ ReportUtil.getTextAreaJsonMsgHtml(response.asString()) + "</pre>");

			responseJson = new JSONObject(response.getBody().asString());
			responseArray = responseJson.getJSONArray("propertySources");

			for (int i = 0, size = responseArray.length(); i < size; i++) {
				JSONObject eachJson = responseArray.getJSONObject(i);
				if (eachJson.get("name").toString().contains("registration-processor-default.properties")) {
					waitInterval = eachJson.getJSONObject("properties").getJSONObject("registration.processor.reprocess.minutes")
							.get("value").toString();
					break;
				}
			}

			return waitInterval;
		} catch (Exception e) {
			logger.error("Exception " + e);
			return waitInterval;
		}

	}


	public static String isTestCaseValidForExecution(TestCaseDTO testCaseDTO) {
		String testCaseName = testCaseDTO.getTestCaseName();
		if (BaseTestCase.currentModule.equalsIgnoreCase("resident")
				|| BaseTestCase.currentModule.equalsIgnoreCase("esignet")) {
			if (testCaseDTO.getRole() != null && (testCaseDTO.getRole().equalsIgnoreCase("residentNew")
					|| testCaseDTO.isValidityCheckRequired())) {
				if (testCaseName.contains("uin") || testCaseName.contains("UIN") || testCaseName.contains("Uin")) {
					if (BaseTestCase.getSupportedIdTypesValueFromActuator().contains("UIN") == false
							&& BaseTestCase.getSupportedIdTypesValueFromActuator().contains("uin") == false) {
						throw new SkipException("Idtype UIN not supported skipping the testcase");
					}
				}
			} else if (testCaseDTO.getRole() != null && (testCaseDTO.getRole().equalsIgnoreCase("residentNewVid")
					|| testCaseDTO.isValidityCheckRequired())) {
				if (testCaseName.contains("vid") || testCaseName.contains("VID") || testCaseName.contains("Vid")) {
					if (BaseTestCase.getSupportedIdTypesValueFromActuator().contains("VID") == false
							&& BaseTestCase.getSupportedIdTypesValueFromActuator().contains("vid") == false) {
						throw new SkipException("Idtype VID not supported skipping the testcase");
					}
				}
			}
		}
		return testCaseName;
	}

	public static String smtpOtpHandler(String inputJson, String testCaseName) {

		JSONObject request = new JSONObject(inputJson);
		String emailId = null;
		String otp = null;
		if (BaseTestCase.currentModule.equals("mobileid") || testCaseName.startsWith("auth_OTP_Auth")
				|| testCaseName.startsWith("auth_EkycOtp") || testCaseName.startsWith("auth_MultiFactorAuth")
				|| testCaseName.startsWith("Ida_EkycOtp") || testCaseName.startsWith("Ida_OTP_Auth")) {
			if (request.has("otp")) {
				if (request.getString("otp").endsWith("@mosip.net")
						|| request.getString("otp").endsWith("@mailinator.com")
						|| request.getString("otp").endsWith("@mosip.io")) {
					
					emailId = request.get("otp").toString();
					logger.info(emailId);
					// Get the otp value from email notification
					otp = MockSMTPListener.getOtp(emailId);
					request.put("otp", otp);
					inputJson = request.toString();
					return inputJson;
				}
			}
		}
		if (BaseTestCase.currentModule.equals("prereg")) {
			if (request.has("request")) {
				if (request.getJSONObject("request").has("otp")) {
					emailId = request.getJSONObject("request").getString("userId");
					logger.info(emailId);
					// Get the otp value from email notification
					otp = MockSMTPListener.getOtp(emailId);
					request.getJSONObject("request").put("otp", otp);
					inputJson = request.toString();
					return inputJson;
				}
			}
		}

		if (BaseTestCase.currentModule.equals("auth")) {
			if (testCaseName.startsWith("auth_GenerateVID") || testCaseName.startsWith("auth_AuthLock")
					|| testCaseName.startsWith("auth_AuthUnLock") || testCaseName.startsWith("auth_RevokeVID")) {
				if (request.has("request")) {
					if (request.getJSONObject("request").has("otp")) {
						if (request.getJSONObject("request").getString("otp").endsWith("@mosip.net")) {
							emailId = request.getJSONObject("request").get("otp").toString();
							logger.info(emailId);
							// Get the otp value from email notification
							otp = MockSMTPListener.getOtp(emailId);
							request.getJSONObject("request").put("otp", otp);
							inputJson = request.toString();
							return inputJson;
						}
					}
				}
			}
		}
		if (BaseTestCase.currentModule.equals("masterdata")) {
			if (testCaseName.startsWith("Resident_GenerateVID") || testCaseName.startsWith("ESignet_AuthenticateUserIDP")
					|| testCaseName.startsWith("Resident_credential")) {
				if (request.has("request")) {
					if (request.getJSONObject("request").has("otp")) {
						if (request.getJSONObject("request").getString("otp").endsWith("@mailinator.com")
								|| request.getJSONObject("request").getString("otp").endsWith("@mosip.io")) {
							emailId = request.getJSONObject("request").get("otp").toString();
							logger.info(emailId);
							// Get the otp value from email notification
							otp = MockSMTPListener.getOtp(emailId);
							request.getJSONObject("request").put("otp", otp);
							inputJson = request.toString();
							return inputJson;
						}
					} else if (request.has("request")) {
						if (request.getJSONObject("request").has("challengeList")) {
							if (request.getJSONObject("request").getJSONArray("challengeList").length() > 0) {
								if (request.getJSONObject("request").getJSONArray("challengeList").getJSONObject(0)
										.has("challenge")) {
									if (request.getJSONObject("request").getJSONArray("challengeList").getJSONObject(0)
											.getString("challenge").endsWith("@mailinator.com") || request.getJSONObject("request").getJSONArray("challengeList").getJSONObject(0)
											.getString("challenge").endsWith("@mosip.io")) {
										emailId = request.getJSONObject("request").getJSONArray("challengeList")
												.getJSONObject(0).getString("challenge");
										logger.info(emailId);
										// Get the otp value from email notification
										otp = MockSMTPListener.getOtp(emailId);
										request.getJSONObject("request").getJSONArray("challengeList").getJSONObject(0)
												.put("challenge", otp);
										inputJson = request.toString();
										return inputJson;
									}
								}
							}
						}
					}
				}
			}
		}

		if (BaseTestCase.currentModule.equals("esignet")|| testCaseName.startsWith("MobileId_WalletBinding")) {
			if (request.has("request")) {
				if (request.getJSONObject("request").has("otp")) {
					if (request.getJSONObject("request").getString("otp").endsWith("@mosip.net")) {
						emailId = request.getJSONObject("request").get("otp").toString();
						logger.info(emailId);
						// Get the otp value from email notification
						otp = MockSMTPListener.getOtp(emailId);
						request.getJSONObject("request").put("otp", otp);
						inputJson = request.toString();
						return inputJson;
					}
				} else if (request.has("request")) {
					if (request.getJSONObject("request").has("challengeList")) {
						if (request.getJSONObject("request").getJSONArray("challengeList").length() > 0) {
							if (request.getJSONObject("request").getJSONArray("challengeList").getJSONObject(0)
									.has("challenge")) {
								if (request.getJSONObject("request").getJSONArray("challengeList").getJSONObject(0)
										.getString("challenge").endsWith("@mosip.net")) {
									emailId = request.getJSONObject("request").getJSONArray("challengeList")
											.getJSONObject(0).getString("challenge");
									logger.info(emailId);
									// Get the otp value from email notification
									otp = MockSMTPListener.getOtp(emailId);
									request.getJSONObject("request").getJSONArray("challengeList").getJSONObject(0)
											.put("challenge", otp);
									inputJson = request.toString();
								}
							}
						}
					}
					return inputJson;
				}
			}

		}

		if (BaseTestCase.currentModule.equals("resident")) {
			if (request.has("request")) {
				if (request.getJSONObject("request").has("otp")) {
					if (request.getJSONObject("request").getString("otp").endsWith("@mosip.net")) {
						emailId = request.getJSONObject("request").get("otp").toString();
						logger.info(emailId);
						// Get the otp value from email notification
						otp = MockSMTPListener.getOtp(emailId);
						request.getJSONObject("request").put("otp", otp);
						inputJson = request.toString();
					}
				} else if (request.getJSONObject("request").has("challengeList")) {
					if (request.getJSONObject("request").getJSONArray("challengeList").length() > 0) {
						if (request.getJSONObject("request").getJSONArray("challengeList").getJSONObject(0)
								.has("challenge")) {
							if (request.getJSONObject("request").getJSONArray("challengeList").getJSONObject(0)
									.getString("challenge").endsWith("@mosip.net")) {
								emailId = request.getJSONObject("request").getJSONArray("challengeList")
										.getJSONObject(0).getString("challenge");
								logger.info(emailId);
								// Get the otp value from email notification
								otp = MockSMTPListener.getOtp(emailId);
								request.getJSONObject("request").getJSONArray("challengeList").getJSONObject(0)
										.put("challenge", otp);
								inputJson = request.toString();
								return inputJson;
							}
						}
					}
				}
			}
		}
		return inputJson;
	}
	
	
	public static void checkDbAndValidate(String timeStamp, String dbChecker) throws AdminTestException {

		String sqlQuery = "SELECT * FROM audit.app_audit_log WHERE log_dtimes > '" + timeStamp
				+ "' AND session_user_name = '" + dbChecker + "';";

		Map<String, Object> response = AuditDBManager
				.executeQueryAndGetRecord(propsKernel.getProperty("audit_default_schema"), sqlQuery);

		Map<String, List<OutputValidationDto>> objMap = new HashMap<String, List<OutputValidationDto>>();
		List<OutputValidationDto> objList = new ArrayList<OutputValidationDto>();
		OutputValidationDto objOpDto = new OutputValidationDto();
		if (response.size() > 0) {

			objOpDto.setStatus("PASS");
		} else {
			objOpDto.setStatus("FAIL");
		}

		objList.add(objOpDto);
		objMap.put("expected vs actual", objList);

		if (!OutputValidationUtil.publishOutputResult(objMap))
			throw new AdminTestException("Failed at output validation");
		Reporter.log(ReportUtil.getOutputValidationReport(objMap));
	}

}
